<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Skype.Bots.Media</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnNullArgument(System.Object,System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnNullOrEmptyString(System.String,System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnInvalidArgument(System.String)">
            <summary>
            Throws the on invalid argument.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnIntPtrZero(System.IntPtr,System.String)">
            <summary>
            Throws if the argument is Intptr.Zero
            </summary>
            <param name="parameterValue"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws if the argument is out of the specified range.
            </summary>
            <param name="argument">The argument.</param>
            <param name="min">The minimum acceptable value.</param>
            <param name="max">The maximum acceptable value.</param>
            <param name="argumentName">The argument's name.</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnMoreThanMax(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws if the argument is more than the specified max
            </summary>
            <param name="argument">The argument.</param>
            <param name="max">The maximum acceptable value.</param>
            <param name="argumentName">The argument's name.</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnMoreThanMax(System.Int64,System.Int64,System.String)">
            <summary>
            Throws if the argument is more than the specified max
            </summary>
            <param name="argument">The argument.</param>
            <param name="max">The maximum acceptable value.</param>
            <param name="argumentName">The argument's name.</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnNonPositiveNumber(System.Int64,System.String)">
            <summary>
            Throws an exception if argument is non-positive number.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">The argument's name.</param>
            <exception cref="T:System.ArgumentNullException">If argument is non-positive.</exception>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnInvalidPort(System.Int32,System.String)">
            <summary>
            Throws an exception if the argument is not a valid port.
            </summary>
            <param name="argument">The argument to be verified.</param>
            <param name="argumentName">The argument's name.</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnNullOrEmptyCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnNullMemberInCollection(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowIfIntOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnNullMemberInCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentVerifier.ThrowOnNullOrInvalidMemberInCollectionCore``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Predicate{``0})">
            <summary>
            Throw ArgumentException, if one of the members in collection is null or invalid.
            </summary>
            <typeparam name="T">Type for collection members</typeparam>
            <param name="collection">The collection to iterate for verification.</param>
            <param name="paramName">Parameter members.</param>
            <param name="isValid">A delegate called to determine if the member value is valid.  Can be null.</param>
            <exception cref="T:System.ArgumentException">Thrown when null or invalid member is found in collection.</exception>
        </member>
        <member name="T:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert">
            <summary>
            Assert arguments
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullArgument(System.Object,System.String)">
            <summary>
            Assert the <paramref name="obj"/> is not null.
            </summary>
            <param name="obj">The value of the parameter being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullMemberInCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Assert the <paramref name="collection"/> does not contain any null members.
            </summary>
            <typeparam name="T">Type for collection members</typeparam>
            <param name="collection">The collection being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullAndValidMemberInCollection``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Predicate{``0})">
            <summary>
            Assert the <paramref name="collection"/> does not contain any null or invalid members.
            </summary>
            <typeparam name="T">Type for collection members</typeparam>
            <param name="collection">The collection being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
            <param name="isValid">A delegate called to determine if the member is valid.  Can be null.</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertValidMemberInCollection``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Predicate{``0})">
            <summary>
            Assert the <paramref name="collection"/> does not contain any invalid members.
            </summary>
            <typeparam name="T">Type for collection members</typeparam>
            <param name="collection">The collection being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
            <param name="isValid">A delegate called to determine if the member is valid.  Can be null.</param>
            <remarks>This method is intended for use with value types. For reference types please use AssertNonNullOrInvalidMemberInCollection</remarks>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullOrEmptyCollection``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Assert the <paramref name="collection"/> is not null or empty.
            </summary>
            <typeparam name="T">Type for collection members</typeparam>
            <param name="collection">The collection being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullOrEmptyCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Assert the <paramref name="collection"/> is not null or empty.
            </summary>
            <typeparam name="T">Type for collection members</typeparam>
            <param name="collection">The collection being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertUniqueMembersInCollection``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Assert the <paramref name="collection"/> does not contain any duplicate members.
            </summary>
            <typeparam name="T">Type for collection members</typeparam>
            <param name="collection">The collection being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullOrEmptyStringInCollection(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Assert the <paramref name="collection"/> does not contain any null or empty members.
            </summary>
            <param name="collection">The collection being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullOrEmptyAndValidStringInCollection(System.Collections.Generic.IEnumerable{System.String},System.String,System.Predicate{System.String})">
            <summary>
            Assert the <paramref name="collection"/> does not contain any null, empty or invalid members.
            </summary>
            <param name="collection">The collection being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
            <param name="isValid">A delegate called to determine if the string value is valid.  Can be null.</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullOrEmptyString(System.String,System.String)">
            <summary>
            Assert the string is not null or empty.
            </summary>
            <param name="str">The string being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertNonNullOrWhiteSpaceString(System.String,System.String)">
            <summary>
            Assert the string is not null and doesn't contain only white space.
            </summary>
            <param name="str">The string being asserted</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertIntWithinRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Assert the number is within the given range.
            </summary>
            <param name="number">The number being asserted</param>
            <param name="minValue">Minimum range value</param>
            <param name="maxValue">Maximum range value</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertLongWithinRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Assert the number is within the given range.
            </summary>
            <param name="number">The number being asserted</param>
            <param name="minValue">Minimum range value</param>
            <param name="maxValue">Maximum range value</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertFloatWithinRange(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Assert the number is within the given range.
            </summary>
            <param name="number">The number being asserted</param>
            <param name="minValue">Minimum range value</param>
            <param name="maxValue">Maximum range value</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertStringSizeWithinRange(System.String,System.Int64,System.Int64,System.String)">
            <summary>
            Assert the string size is within the given range.
            </summary>
            <param name="s">The string being asserted</param>
            <param name="minValue">Minimum range value</param>
            <param name="maxValue">Maximum range value</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Media.Services.Common.ArgumentAssert.AssertTimeSpanWithinRange(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.String)">
            <summary>
            Assert the timespan is within the given range.
            </summary>
            <param name="timeSpan">The timespan being asserted</param>
            <param name="minValue">Minimum range value</param>
            <param name="maxValue">Maximum range value</param>
            <param name="paramName">The name of the parameter being asserted</param>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.TotalBytesProvided">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.TotalSamplesProvided">
            <summary>
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.FileSourcePlayerEndOfFile">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.#ctor(Microsoft.Skype.Bots.Media.AudioSocket)">
            <summary>
            </summary>
            <param name="audioSocket"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.Microsoft#Skype#Internal#Bots#Media#IInternalFileSourcePlayer#GetNextSample(Microsoft.Rtc.Internal.Media.MediaApi.MediaBuffer)">
            <summary>
            GetNextSample will copy the data in the mediabuffer. For optimization purpose this call is not thread safe,
            It needs to be called in a serialized way. This is guaranteed by the dequeue operation
            </summary>
            <param name="mediaBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.Play(Microsoft.Skype.Internal.Bots.Media.PlaySettings)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.Pause">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.LoadFileSource(Microsoft.Skype.Internal.Bots.Media.IFileSource)">
            <summary>
            </summary>
            <param name="fileSource"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.Stop">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.Skip(System.Int32)">
            <summary>
            
            </summary>
            <param name="milliSeconds"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.Dispose">
            <summary>
            Dispose of the player and attached resources
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.PreAllocateAudioBuffers">
            <summary>
            PreAllocatingAudioBuffers this should be called within a lock shared with m_recycledMediaBuffers
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AudioFileSourcePlayer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.PlaySettings">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.PlaySettings.Loop">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.PlaySettings.AudioPlaybackSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.PlaySettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.PlaySettings.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.AudioPlaybackSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.AudioPlaybackSpeed.Half">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.AudioPlaybackSpeed.ThreeQuarters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.AudioPlaybackSpeed.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.AudioPlaybackSpeed.OneAndAQuarter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.AudioPlaybackSpeed.OneAndAHalf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.AudioPlaybackSpeed.OneAndThreeQuarters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.AudioPlaybackSpeed.TwoTimes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.FileSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.FileSource.FileSourceSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.FileSource.FileSourceFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.FileSource.RawFileSizeInBytes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.FileSource.#ctor(Microsoft.Skype.Internal.Bots.Media.FileSourceSettings)">
            <summary>
            
            </summary>
            <param name="fileSourceSettings"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.FileSource.#ctor(Microsoft.Skype.Internal.Bots.Media.FileSourceSettings,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="fileSourceSettings"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.FileSource.#ctor(Microsoft.Skype.Internal.Bots.Media.FileSourceSettings,System.IO.Stream,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileSourceSettings"></param>
            <param name="stream"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.FileSource.ReadNextBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="readBytes"></param>
            <param name="currentPosition"></param>
            <param name="bytesToRead"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.FileSourceSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.FileSourceSettings.FileSourceExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.FileSourceSettings.FileSourceType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.FileSourceSettings.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.WavFileReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.WavFileReader.RiffChunks">
            <summary>
            Unnecessary riff chunks present in the wav headers
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.WavFileReader.#ctor(System.String,System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="fileName"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.WavFileReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="stream"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.WavFileReader.#ctor(System.IO.Stream,Microsoft.Skype.Bots.Media.IWavReaderMetricsCollector,System.Boolean)">
            <summary>
            Unit test constructor with a stream
            </summary>
            <param name="stream"></param>
            <param name="wavReaderMetricsCollector"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.WavFileReader.#ctor(System.String,Microsoft.Skype.Bots.Media.IWavReaderMetricsCollector,System.Boolean)">
            <summary>
            Unit test constructor with a file name
            </summary>
            <param name="fileName"></param>
            <param name="wavReaderMetricsCollector"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.WavFileReader.ReadNextBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read the next block
            </summary>
            <returns></returns>
            <param name="readBytesArray">read content buffer</param>
            <param name="currentPosition">current position</param>
            <param name="bytesToRead">bytes to read from specified position</param>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.Helper">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.Helper.MediaApiComponentName">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.Helper.BypassRequiredMinimumSendFormats">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.CreateConfigurationManager(System.Action{Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs})">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.SetConfigurationManager(Microsoft.Skype.Internal.Bots.Media.IConfigurationManager)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.GetConfigurationManager">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.GetBitsPerPixel(Microsoft.Skype.Bots.Media.VideoColorFormat)">
            <summary>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.GetStride(Microsoft.Skype.Bots.Media.VideoFormat)">
             <summary>
            
             </summary>
             <param name="format"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ForgetAndLogException(System.Threading.Tasks.Task,System.String)">
             <summary>
            
             </summary>
             <param name="task"></param>
             <param name="description"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.GetContextAsInt(Microsoft.Rtc.Internal.Media.MediaApi.AudioMediaBuffer)">
            <summary>
            Extension method to access the context pointer value as an int
            </summary>
            <param name="audioMediaBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.FreePointers(Microsoft.Rtc.Internal.Media.MediaApi.AudioMediaBuffer)">
            <summary>
            Extension to free the mem allocated for the mediabuffer pointers
            </summary>
            <param name="audioMediaBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ValidateAudioBufferSize(System.Int64,Microsoft.Skype.Bots.Media.AudioFormat)">
            <summary>
            Validates the audio buffer length
            </summary>
            <param name="bufferSize"></param>
            <param name="audioFormat"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.CreateVideoSourceMediaBuffer(Microsoft.Skype.Bots.Media.VideoMediaBuffer)">
            <summary>
            Create a media api video buffer from bot's VideoMediaBuffer
            </summary>
            <param name="videoMediaBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ValidateVideoBuffer(Microsoft.Skype.Bots.Media.VideoMediaBuffer,Microsoft.Skype.Bots.Media.VideoSocketSettings)">
            <summary>
            Validates the video media buffers from the socket settings
            </summary>
            <param name="videoMediaBuffer"></param>
            <param name="videoSettings"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.BytesToIntPtr(System.Byte[])">
            <summary>
            Converts bytes to IntPtr
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.IntPtrToBytes(System.IntPtr,System.UInt32)">
            <summary>
            Converts IntPtr to byte array
            </summary>
            <param name="dataPtr"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToExternalDataType(Microsoft.Skype.Bots.Media.DataType)">
            <summary>
            Converts from data type to external data type
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToMediaType(Microsoft.Rtc.MPService.MPMediaFormat.MediaType)">
            <summary>
            Converts from MPMediaFormat.MediaType to MediaType
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToMPMediaType(Microsoft.Skype.Bots.Media.MediaType)">
            <summary>
            Converts to MPMediaFormat.MediaType
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToMediaApiVideoSourceFormat(Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Converts to VideoSourceFormat from VideoFormat
            </summary>
            <param name="videoFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToMediaApiEncodedVideoSourceFormat(Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Converts to VideoSourceFormat from VideoFormat
            </summary>
            <param name="videoFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToMediaApiVideoFormat(Microsoft.Skype.Bots.Media.VideoColorFormat)">
            <summary>
            Converts to MediaApi.VideoFormat from VideoColorFormat
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToVideoColorFormat(System.String)">
            <summary>
            Converts to VideoColorFormat 
            </summary>
            <param name="mediaApiColorFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToVideoFormat(Microsoft.Rtc.Internal.Media.MediaApi.VideoSourceFormat)">
            <summary>
            Converts from VideoSourceFormat to VideoFormat
            </summary>
            <param name="videoSourceFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToVideoFormats(Microsoft.Rtc.Internal.Media.MediaApi.VideoSourceFormat[])">
            <summary>
            Converts to VideoFormat[] from MediaApi.VideoSourceFormat[]
            </summary>
            <param name="mediaApiVideoFormats"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToMediaApiVideoSourceFormats(Microsoft.Skype.Bots.Media.VideoFormat[])">
            <summary>
            Converts VideoFormat[] to VideoSourceFormat[]
            </summary>
            <param name="videoFormats"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.ToEncodedMediaApiVideoSourceFormats(Microsoft.Skype.Bots.Media.VideoFormat[])">
            <summary>
            Converts to VideoSourceFormat from VideoFormat[] for encoded formats
            </summary>
            <param name="videoFormats"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.Helper.IsSame(Microsoft.Skype.Bots.Media.VideoFormat[],Microsoft.Skype.Bots.Media.VideoFormat[])">
            <summary>
            Compares VideoFormat[] lists
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.Initialize(Microsoft.Skype.Bots.Media.MediaPlatformSettings,Microsoft.Skype.Internal.Bots.Media.IConfigurationManager,Microsoft.Skype.Internal.Bots.Media.ILogger)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="configurationManager"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.Initialize(Microsoft.Skype.Bots.Media.MediaPlatformSettings,Microsoft.Skype.Internal.Bots.Media.IConfigurationManager,Microsoft.Skype.Internal.Bots.Media.ILogger,System.Boolean)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="configurationManager"></param>
            <param name="logger"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.VerifyMinimumSupportedVersion(System.String,System.String)">
            <summary>
            Throws if mediaBotsVersion is smaller than minimumSupportedVersion
            </summary>
            <param name="mediaBotsVersion"></param>
            <param name="minimumSupportedVersion"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.Initialize(Microsoft.Skype.Bots.Media.MediaPlatformSettings)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket)">
            <summary>
            
            </summary>
            <param name="audioSocket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            
            </summary>
            <param name="audioSocket"></param>
            <param name="videoSocket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket})">
            <summary>
            
            </summary>
            <param name="audioSocket"></param>
            <param name="videoSockets"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket},Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            
            </summary>
            <param name="audioSocket"></param>
            <param name="videoSockets"></param>
            <param name="vbssSocket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            
            </summary>
            <param name="vbssSocket"></param>
            <returns></returns>
            Returns a serialized mediaConfiguration object, containing MP URI and render context for the vbss modality.
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,Microsoft.Skype.Bots.Media.IDataSocket)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket},Microsoft.Skype.Bots.Media.IVideoSocket,Microsoft.Skype.Bots.Media.IDataSocket)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="userDisposeCalled"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateAudioSocket(Microsoft.Skype.Bots.Media.AudioSocketSettings,System.Boolean)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.CreateFileSource(Microsoft.Skype.Internal.Bots.Media.FileSourceSettings,System.Boolean,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="isTest"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.FetchProductVersions">
            <summary>
            Fetch and store the MP, mediastack and bots versions
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.ValidateObjectType``1(System.Object,System.String,System.String)">
            <summary>
            Validates if obj is of type T. Throws invalid operation exception if object type is invalid
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">object</param>
            <param name="objName">object name</param>
            <param name="exceptionMessage">exception message part of invalid operation exception</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.InternalMediaPlatform.MPEventLogger(Microsoft.Rtc.MPService.Internal.MPServiceEventLogLabel,System.Object[])">
            <summary>
            MPServiceEventDelegate. The in-process MP Service implementation sends system events here rather than 
            logging Application Events in the event log.
            </summary>
            <param name="eventLogLabel"></param>
            <param name="detailsList"></param>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.VideoFormatWithoutBitRateComparer">
            <summary>
            Compares VideoFormats ignoring the bitrate
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.VideoFormatWithoutBitRateComparer.Equals(Microsoft.Skype.Bots.Media.VideoFormat,Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Equals comparison of VideoFormat without bitrate
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.VideoFormatWithoutBitRateComparer.GetHashCode(Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Get HashCode of the VideoFormat for the Comparer
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.GetMediaControllerWhitelist">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.EnableData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.LoggingConfiguration">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.TelemetryConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.PerfCounterConfiguration">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.MinimumSupportedVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.ConfigurationChangedHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IConfigurationManager.Initialize(System.Boolean,System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs.TelemetryConfigurationChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs.LoggingConfigurationChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs.WhitelistChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs.MinimumVersionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs.EnableDataConfigurationChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs.PerfCounterConfigurationChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.IFileSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IFileSource.FileSourceSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IFileSource.FileSourceFormat">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IFileSource.ReadNextBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="readBytes"></param>
            <param name="currentPosition"></param>
            <param name="bytesToRead"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.IFileSource.RawFileSizeInBytes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.IFileReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.FileSourceExtension">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.FileSourceExtension.Wav">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.FileSourceType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.FileSourceType.Audio">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.FileSourceFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.FileSourceFormat.AudioFormatSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.FileSourceFormat.VideoFormatSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.AudioFormatSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AudioFormatSettings.CompressionCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AudioFormatSettings.NumberOfChannels">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AudioFormatSettings.SampleRate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AudioFormatSettings.AvgBytesPerSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AudioFormatSettings.BlockAlign">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AudioFormatSettings.SignificantBitPerSample">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.VideoFormatSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.IFileSourcePlayer">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IFileSourcePlayer.LoadFileSource(Microsoft.Skype.Internal.Bots.Media.IFileSource)">
            <summary>
            Load a file source
            </summary>
            <param name="fileSource"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IFileSourcePlayer.Play(Microsoft.Skype.Internal.Bots.Media.PlaySettings)">
            <summary>
             Start Playing
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IFileSourcePlayer.Stop">
            <summary>
            Stops the player
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IFileSourcePlayer.Skip(System.Int32)">
            <summary>
            The number of milliseconds to skip. The value can be positive (to move forward) or negative (to move backward).
            This method can be called in any state.
            If user skips beyond the end of the file, Player will stop and event FileSourcePlayerEndOfFile will be raised.
            If user skips before the beginning of the file, Player will start playing from the beginning.
            </summary>
            <param name="milliSeconds"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IFileSourcePlayer.Pause">
            <summary>
            Pause the player, invoking play will resume from the current position
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Internal.Bots.Media.IFileSourcePlayer.FileSourcePlayerEndOfFile">
            <summary>
            Event to signal end of file reached
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.IInternalFileSourcePlayer.GetNextSample(Microsoft.Rtc.Internal.Media.MediaApi.MediaBuffer)">
            <summary>
            Get Next sample from the player
            </summary>
            <param name="mediaBuffer"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.PlayerStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.PlayerStatus.Playing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.PlayerStatus.Stopped">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.PlayerStatus.Paused">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.FileSourcePlayerEndOfFileEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.FileSourcePlayerEndOfFileEventArgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.ILogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ILogger.SetLoggingLevel(System.String,Microsoft.Skype.Internal.Bots.Media.LogLevel)">
             <summary>
            
             </summary>
             <param name="component"></param>
             <param name="level"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ILogger.Write(System.String,System.String,Microsoft.Skype.Internal.Bots.Media.LogLevel,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="component"></param>
            <param name="correlationId"></param>
            <param name="level"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ILogger.Write(System.String,Microsoft.Skype.Internal.Bots.Media.LogLevel,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="component"></param>
            <param name="level"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ILogger.AddListeners(System.Collections.Generic.IList{System.Diagnostics.TraceListener})">
            <summary>
            
            </summary>
            <param name="traceListeners">The trace listeners</param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ILogger.AddListener(System.Diagnostics.TraceListener)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ILogger.RemoveListener(System.Diagnostics.TraceListener)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ILogger.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.LogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.LogLevel.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.LogLevel.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.LogLevel.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.LogLevel.Verbose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.ITelemetryWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ITelemetryWriter.Initialize(System.String,Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="applicationId"></param>
            <param name="configuration"></param>
            <param name="isTest"></param>
            <param name="mediaStackVersion"></param>
            <param name="mediaBotsVersion"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ITelemetryWriter.SetTelemetryConfiguration(Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ITelemetryWriter.TryLogSocketMetrics(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            
            </summary>
            <param name="metricsData"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ITelemetryWriter.TryLogWavValidationFailure(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            
            </summary>
            <param name="metricsData"></param>
            <param name="isTest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ITelemetryWriter.TryLogFilePlayerMetrics(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            
            </summary>
            <param name="metricsData"></param>
            <param name="isTest"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.ClsLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ClsLogger.Initialize(Microsoft.Skype.Internal.Bots.Media.ILogger,System.Nullable{Microsoft.Skype.Internal.Bots.Media.LogLevel})">
            <summary>
            
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ClsLogger.StopClsLogger">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ClsLogger.SetEtlFormatOption(Microsoft.Skype.Internal.Bots.Media.FormatOption)">
            <summary>
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ClsLogger.SetLoggingInfo(System.Collections.Generic.IList{System.String})">
            <summary>
            </summary>
            <param name="logScenarioList"></param>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.ClsLiteNotifications">
            <summary>
            Microsoft.Rtc.ClsContracts.INotifications implementation to trace ClsLite notifications
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ClsLiteNotifications.ShouldTrace(Microsoft.Skype.Internal.Bots.Media.LogLevel)">
            <summary>
            Return true if the trace should be logged, false if it should be dropped based on the tracing level
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration.MediaAgentsPlatformLogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration.MediaApiLogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration.AriaLoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration.ClsLoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration.AreEquivalent(Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration,Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration)">
            <summary>
            
            </summary>
            <param name="loggingConfiguration1"></param>
            <param name="loggingConfiguration2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.ClsLoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.ClsLoggingConfiguration.ClsLoggerFormatOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.ClsLoggingConfiguration.ClsLoggerScenarioStrings">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ClsLoggingConfiguration.AreEquivalent(Microsoft.Skype.Internal.Bots.Media.ClsLoggingConfiguration,Microsoft.Skype.Internal.Bots.Media.ClsLoggingConfiguration)">
            <summary>
            Verifies if two CLSLoggingConfiguration are equivalent
            </summary>
            <param name="loggingConfiguration1"></param>
            <param name="loggingConfiguration2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.ClsLoggingConfiguration.ToString">
            <summary>
            ToString override
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.AriaLoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AriaLoggingConfiguration.AriaTenantToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AriaLoggingConfiguration.AriaTraceEventName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.AriaLoggingConfiguration.SplitAriaTracesByLevel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AriaLoggingConfiguration.AreEquivalent(Microsoft.Skype.Internal.Bots.Media.AriaLoggingConfiguration,Microsoft.Skype.Internal.Bots.Media.AriaLoggingConfiguration)">
            <summary>
            Checks if two AriaLoggingConfiguration are equivalent
            </summary>
            <param name="loggingConfiguration1"></param>
            <param name="loggingConfiguration2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.AriaLoggingConfiguration.ToString">
            <summary>
            ToString override
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.FormatOption">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.FormatOption.Plaintext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Internal.Bots.Media.FormatOption.SimpleScrub">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.ClsFormatOptionsEnumConverter">
            <summary>
            Class that converts a string into a ClsFormatOptions enum
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration.AriaTenantToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration.MonitorUnhandledExceptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration.MonitorSocketMetrics">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration.AreEquivalent(Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration,Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration)">
            <summary>
            
            </summary>
            <param name="telemetryConfiguration1"></param>
            <param name="telemetryConfiguration2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration.ToString">
            <summary>
            ToString override
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration.IsValidConfiguration(Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration)">
            <summary>
            Checks if the config is valid
            </summary>
            <param name="telemetryConfiguration"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioMediaBuffer">
            <summary>
            Represents an unmanaged buffer containing audio media data.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaBuffer.Data">
            <summary>
            Pointer to the unmanaged media buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaBuffer.Length">
            <summary>
            The length of data in the media buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaBuffer.AudioFormat">
            <summary>
            The audio format.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaBuffer.ActiveSpeakers">
            <summary>
            Current active speakers in the conference. 
            The value is the MediaSourceIds (MSI) of the active speakers in the conference and does not include bot's own MSI.
            If there is no active speaker or silence in the conference, the value would be an empty array.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaBuffer.IsSilence">
            <summary>
            Indicates if the received audio media buffer is a silence packet.
            This property is populated by the Real-Time Media Platform for Bots on received audio buffers. When 
            sending buffers via the IAudioSocket.Send API, this property is unused.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaBuffer.Timestamp">
            <summary>
            Timestamp of when the media content was sourced, in 100-ns units.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioMediaBuffer.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioMediaBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources held by the buffer object.
            Must be implemented in the derived class.
            </summary>
            <param name="disposing">
            If true, both managed and unmanaged resources can be
            disposed.
            If false, only unmanaged resources can be disposed.</param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioRenderMediaBuffer">
            <summary>
            The class is used when an audio media buffer is received on an audio
            socket. Application will receive an instance of this class as the type of
            AudioMediaBuffer.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioRenderMediaBuffer.#ctor(Microsoft.Rtc.Internal.Media.MediaApi.MediaBuffer,Microsoft.Skype.Bots.Media.AudioFormat)">
            <summary>
            Constructor
            </summary>
            <param name="internalBuffer"></param>
            <param name="audioFormat"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioMediaSession">
            <summary>
            Class that represents an audio media session.
            Implements IDisposable because it instantiates an ISourceConsumerWrapper object which is IDisposable
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaSession.RenderContext">
            <summary>
            The render context
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaSession.SourceContext">
            <summary>
            The source context
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack,Microsoft.Skype.Bots.Media.AudioFormat,Microsoft.Skype.Bots.Media.AudioSourceProvider.SendStatusChangedCallback,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="enabledStreamDirections">Stream directions</param>
            <param name="mediaBufferReadyCallback">Callback called to raise media buffers</param>
            <param name="supportedAudioFormat">Supported audio format</param>
            <param name="sendStatusChangedCallback">Callback called when the send status changes</param>
            <param name="callId">Call id</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack,Microsoft.Skype.Bots.Media.AudioFormat,Microsoft.Skype.Bots.Media.AudioSourceProvider.SendStatusChangedCallback,System.String,Microsoft.Skype.Bots.Media.IMediaApiAudioSourceConsumer)">
            <summary>
            Initialize API - with a wrapper hook for unit tests
            </summary>
            <param name="enabledStreamDirections">Stream directions</param>
            <param name="mediaBufferReadyCallback">Callback called to raise media buffers</param>
            <param name="supportedAudioFormat">Supported audio format</param>
            <param name="sendStatusChangedCallback">Callback called when the send status changes</param>
            <param name="callId">Call id</param>
            <param name="sourceConsumer">A wrapper around the MediaApi source consumer. Used for unit testing only, otherwise the other Initialize API should be called.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioMediaSession.DeliverBuffer(Microsoft.Skype.Bots.Media.AudioMediaBuffer)">
            <summary>
            Delivers buffer with the push mode
            Here we allow access directly to the mediaConsumer
            </summary>
            <param name="audioMediaBuffer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioMediaSession.Dispose">
            <summary>
            Disposes media session
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioSocket">
            <summary>
            Provides Send and Receive I/O access to an audio stream.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.AudioSocket.m_eventNotificationQueue">
            <summary>
            The event notifications queue serializes the workitems and runs them on the threadpool
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.AudioSocket.AudioMediaReceived">
            <summary>
            If the application has configured the AudioSocket to receive media, this
            event is raised each time a packet of audio media is received.
            Once the application has consumed the buffer, it must call the buffer's
            Dispose() method.
            </summary>
            <remarks>
            The application must be able to handle at least 50 incoming audio buffers
            per second.
            Events are serialized, so only one event at a time is raised to the app.
            </remarks>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.AudioSocket.AudioSendStatusChanged">
            <summary>
            If the application has configured the AudioSocket to send media, this
            event is raised to inform the application when it may begin sending
            media and when it should stop. The application cannot send media before
            receiving a MediaSendStatusChanged event indicating the SendStatus is 
            Active, such media will be discarded.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.AudioSocket.DominantSpeakerChanged">
            <summary>
            This event is raised when there is a change in the dominant speaker in the conference.
            If there is no dominant speaker in the conference the CurrentDominantSpeaker argument in the event will have the value None (0xFFFFFFFF).
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.AudioSocket.ToneReceived">
            <summary>
            This event is raised when the DTMF tone is received. ToneId enum indicates the tone value.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocket.RenderContext">
            <summary>
            The render context of this audio socket.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocket.SourceContext">
            <summary>
            The source context of this audio socket.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocket.SupportedFormat">
            <summary>
            The supported send/receive format of this audio socket.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocket.IsTest">
            <summary>
            IsTest property exposed for unit tests
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocket.#ctor(Microsoft.Skype.Bots.Media.AudioSocketSettings)">
            <summary>
            Allows the application to send a packet of audio media if the application
            has configured the AudioSocket to send media.
            The application should be sending about 50 packets of audio media per
            second; each buffer containing 20 milliseconds worth of audio content.
            The application must create a concrete class which derives from the
            AudioMediaBuffer abstract class. The buffer object passed to the Send
            method is still potentially in-use after the method returns to the
            caller. The application must not free the buffer's data until the
            the buffer object's Dispose() method is invoked by the Media Platform.
            </summary>
            <param name="settings">Socket settings</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocket.#ctor(Microsoft.Skype.Bots.Media.AudioSocketSettings,System.Boolean)">
            <summary>
            Internal constructor meant to be used by our team's services (eg. IVR) with a isTest attribute
            </summary>
            <param name="settings"></param>
            <param name="isTest">Used to differentiate STs from prod traffic - it will mark socket metrics with a test tag or not. 
            It's different than the MediaPlatform's isTest initialization property which is used to tag ALL events with a test tag</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocket.#ctor(Microsoft.Skype.Bots.Media.AudioSocketSettings,Microsoft.Skype.Bots.Media.IAudioMediaSession,Microsoft.Skype.Bots.Media.ISocketMetricsCollector,System.Boolean)">
            <summary>
            Internal constructor used by unit tests
            </summary>
            <param name="settings"></param>
            <param name="mediaSession"></param>
            <param name="metricsCollector"></param>
            <param name="isTest">Used to differentiate STs from prod traffic - it will mark socket metrics with a test tag or not. 
            It's different than the MediaPlatform's isTest initialization property which is used to tag ALL events with a test tag</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocket.Send(Microsoft.Skype.Bots.Media.AudioMediaBuffer)">
            <summary>
            Allows the application to send a packet of audio media if the application
            has configured the AudioSocket to send media.
            </summary>
            <param name="buffer">AudioMediaBuffer to send.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocket.BindMPMediaSession(Microsoft.Skype.Bots.Media.IInternalMediaSession)">
            <summary>
            Binds the audio socket with MPMediaSession
            </summary>
            <param name="mpMediaSession"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocket.OnDominantSpeakerChanged(System.Object,Microsoft.Rtc.MPService.MPMediaSessionDominantSpeakerChangedEventArgs)">
            <summary>
            Handles the dominant speaker changed event from MPMediaSession
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocket.OnToneReceived(System.Object,Microsoft.Rtc.MPService.MPMediaSessionToneReceivedEventArgs)">
            <summary>
            Handles the ToneReceived event from MPMediaSession
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocket.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioSourceProvider">
            <summary>
            Class that represents an audio source provider.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSourceProvider.#ctor(Microsoft.Skype.Bots.Media.AudioFormat,Microsoft.Skype.Bots.Media.AudioSourceProvider.SendStatusChangedCallback,System.String,Microsoft.Skype.Bots.Media.IMediaApiAudioSourceConsumer)">
            <summary>
            Constructor
            </summary>
            <param name="supportedAudioFormat"></param>
            <param name="callback"></param>
            <param name="callId"></param>
            <param name="audioConsumer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSourceProvider.NeedMoreSample">
            <summary>
            This call will be deprecated PBI - http://skype.vso.io/832347 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaSendStatus">
            <summary>
            Indicates whether an AudioSocket or VideoSocket is capable of sending media.
            </summary>
            Indicates whether an AudioSocket or VideoSocket or DataSocket is capable of sending media.
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaSendStatus.Inactive">
            <summary>
            Media cannot be sent
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaSendStatus.Active">
            <summary>
            Media can be sent
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.StreamDirection">
            <summary>
            Stream directionality, from the point-of-view of the local media endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.StreamDirection.Inactive">
            <summary>
            Media cannot be sent nor received
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.StreamDirection.Recvonly">
            <summary>
            Media can be received but not sent
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.StreamDirection.Sendonly">
            <summary>
            Media can be sent but not received
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.StreamDirection.Sendrecv">
            <summary>
            Media can be sent and received
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaType">
            <summary>
            Indicates the media type of the socket.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaType.Audio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaType.Video">
            <summary>
            Video
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaType.Vbss">
            <summary>
            Video-based screen sharing (VBSS)
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaType.Data">
            <summary>
            Reserved for the internal use.
            </summary>
            Data
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataType">
            <summary>
            Reserved for the internal use.
            </summary>
            Indicates the data type.
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.DataType.Transcript">
            <summary>
            Reserved for the internal use.
            </summary>
            Transcript
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.ConfigurationManager">
            <summary>
            Configuration manager class.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.ConfigurationManager.#ctor(System.Action{Microsoft.Skype.Internal.Bots.Media.ConfigurationChangedEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="configChangedHandler"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.ConfigurationManager.GetMediaControllerWhitelist">
            <summary>
            Whitelist of media controller FQDNs
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ConfigurationManager.LoggingConfiguration">
            <summary>
            Logging configuration
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ConfigurationManager.TelemetryConfiguration">
            <summary>
            Telemetry configuration
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ConfigurationManager.PerfCounterConfiguration">
            <summary>
            Performance counters configuration
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ConfigurationManager.MinimumSupportedVersion">
            <summary>
            Minimum version
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ConfigurationManager.EnableData">
            <summary>
            Enable data configuration
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ConfigurationManager.IsInitialized">
            <summary>
            Set to true when ConfigurationManager is initialized
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ConfigurationManager.ConfigurationChangedHandler">
            <summary>
            Handler for config changed
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.ConfigurationManager.Initialize(System.Boolean,System.String)">
            <summary>
            Initializer
            </summary>
            <param name="isProduction">If true, use ECS's prod environment. If false, use ECS's INT environment</param>
            <param name="applicationId">Used to fetch the configuration for this application id. 
            If there is no application id specific configuration in ECS, the default configuration is fetched.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.ConfigurationManager.Initialize(System.Boolean,Microsoft.Skype.ECS.Client.IECSClient,Microsoft.Skype.ECS.Client.IECSConfigSettings,System.String)">
            <summary>
            Initializer
            </summary>
            <param name="isProduction">If true, use ECS's prod environment. If false, use ECS's INT environment</param>
            <param name="ecsClient">Used to register ConfigChanged and ConfigError ECS delegates</param>
            <param name="ecsSettings">Used to get config values from ECS</param>
            <param name="applicationId">Used to fetch the configuration for this application id. 
            If there is no application id specific configuration in ECS, the default configuration is fetched.</param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataMediaBuffer">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataMediaBuffer.Data">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataMediaBuffer.MediaSourceId">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataMediaBuffer.Dispose">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataMediaBuffer.Dispose(System.Boolean)">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataRenderMediaBuffer">
            <summary>
            The class is used when an data media buffer is received on an data
            socket. Application will receive an instance of this class as the type of
            DataMediaBuffer.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataRenderMediaBuffer.#ctor(Microsoft.Rtc.Internal.Media.MediaApi.MediaBuffer)">
            <summary>
            Constructor
            </summary>
            <param name="internalBuffer"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataMediaSession">
            <summary>
            Class that represents a data media session.
            Implements IDisposable because it instantiates a ISourceConsumerWrapper object which is IDisposable
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataMediaSession.RenderContext">
            <summary>
            The render context
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataMediaSession.SourceContext">
            <summary>
            The source context
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataMediaSession.GetMaxSendBufferSize(System.UInt32)">
            <summary>
            Max send buffer size
            </summary>
            <param name="numRecipients">Number of recipients the data needs to be sent. If data needs to broadcasted, this parameter should be set to 0.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,System.Action{Microsoft.Rtc.Internal.Media.MediaApi.DataSinkMediaBuffer},Microsoft.Skype.Bots.Media.DataSourceProvider.SendStatusChangedCallback,Microsoft.Skype.Bots.Media.DataType,Microsoft.Skype.Bots.Media.DataType,System.String)">
            <summary>
            Initialize API
            </summary>
            <param name="enabledStreamDirections">Stream directions</param>
            <param name="dataBufferReceivedCallback">Callback called to raise media buffers</param>
            <param name="sendStatusChangedCallback">Callback called when the send status changes</param>
            <param name="receiveDataType">Receive data type</param>
            <param name="sendDataType">Send data tyoe</param>
            <param name="callId">Call id</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,System.Action{Microsoft.Rtc.Internal.Media.MediaApi.DataSinkMediaBuffer},Microsoft.Skype.Bots.Media.DataSourceProvider.SendStatusChangedCallback,Microsoft.Skype.Bots.Media.DataType,Microsoft.Skype.Bots.Media.DataType,System.String,Microsoft.Skype.Bots.Media.IMediaApiDataSinkConsumer,Microsoft.Skype.Bots.Media.IMediaApiDataSourceConsumer)">
            <summary>
            Initialize API - with a wrapper hook for unit tests
            </summary>
            <param name="enabledStreamDirections">Stream directions</param>
            <param name="dataBufferReceivedCallback">Callback called to raise media buffers</param>
            <param name="sendStatusChangedCallback">Callback called when the send status changes</param>
            <param name="receiveDataType"></param>        
            <param name="sendDataType"></param>
            <param name="callId">Call id</param>
            <param name="sinkConsumer">A wrapper around the MediaApi sink consumer. Used for unit testing only, otherwise the other Initialize API should be called.</param>
            <param name="sourceConsumer">A wrapper around the MediaApi source consumer. Used for unit testing only, otherwise the other Initialize API should be called.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataMediaSession.DeliverBuffer(Microsoft.Skype.Bots.Media.DataMediaBuffer,System.UInt32[])">
            <summary>
            Delivers the media buffer to specific recipientIds.
            </summary>
            <param name="dataMediaBuffer"></param>
            <param name="recipientIds"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataMediaSession.Dispose">
            <summary>
            Disposes the data media session.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataSinkProvider">
            <summary>
            Data sink provider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkProvider.#ctor(System.Action{Microsoft.Rtc.Internal.Media.MediaApi.DataSinkMediaBuffer})">
            <summary>
            Constructor
            </summary>
            <param name="dataBufferReceivedCallBack"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkProvider.DataLost">
            <summary>
            Implements data received interface method provided by MediaApi.
            We don't operate on lost data event for now. We can consume it later if needed.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkProvider.DataReceived(Microsoft.Rtc.Internal.Media.MediaApi.DataSinkMediaBuffer)">
            <summary>
            Implements data received interface method provided by MediaApi.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkProvider.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkProvider.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataSocket">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.DataSocket.m_eventNotificationQueue">
            <summary>
            The event notifications queue serializes the workitems and runs them on the threadpool
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.DataSocket.DataMediaReceived">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.DataSocket.DataSendStatusChanged">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSocket.GetMaxSendBufferSize(System.UInt32)">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSocket.RenderContext">
            <summary>
            The render context of this Data socket.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSocket.SourceContext">
            <summary>
            The source context of this Data socket.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSocket.IsTest">
            <summary>
            IsTest property exposed for unit tests
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSocket.#ctor(Microsoft.Skype.Bots.Media.DataSocketSettings)">
            <summary>
            Reserverd for internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSocket.#ctor(Microsoft.Skype.Bots.Media.DataSocketSettings,System.Boolean)">
            <summary>
            Internal constructor meant to be used by our team's services (eg. IVR) with a isTest attribute
            </summary>
            <param name="settings"></param>
            <param name="isTest">Used to differentiate STs from prod traffic - it will mark socket metrics with a test tag or not.
            It's different than the MediaPlatform's isTest initialization property which is used to tag ALL events with a test tag</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSocket.#ctor(Microsoft.Skype.Bots.Media.DataSocketSettings,Microsoft.Skype.Bots.Media.IDataMediaSession,Microsoft.Skype.Bots.Media.ISocketMetricsCollector,System.Boolean)">
            <summary>
            Internal constructor used by unit tests
            </summary>
            <param name="settings"></param>
            <param name="mediaSession"></param>
            <param name="metricsCollector"></param>
            <param name="isTest">Used to differentiate STs from prod traffic - it will mark socket metrics with a test tag or not.
            It's different than the MediaPlatform's isTest initialization property which is used to tag ALL events with a test tag</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSocket.Send(Microsoft.Skype.Bots.Media.DataMediaBuffer,System.UInt32[])">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSocket.Dispose">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataSourceProvider">
            <summary>
            Class that represents data source provider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceProvider.#ctor(Microsoft.Skype.Bots.Media.DataSourceProvider.SendStatusChangedCallback,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="callback"></param>
            <param name="callId"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceProvider.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceProvider.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSourceProvider.SourceName">
            <summary>
            Source name.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceProvider.Dispose">
            <summary>
            Diposes the DataSourceProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceProvider.Dispose(System.Boolean)">
            <summary>
            Diposes the DataSourceProvider (no-op for now)
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IDataMediaSession">
            <summary>
            IDataMediaSession interface
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IDataMediaSession.GetMaxSendBufferSize(System.UInt32)">
            <summary>
            Max send buffer size
            </summary>
            <param name="numRecipients"></param>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IDataMediaSession.RenderContext">
            <summary>
            RenderContext
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IDataMediaSession.SourceContext">
            <summary>
            SourceContext
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IDataMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,System.Action{Microsoft.Rtc.Internal.Media.MediaApi.DataSinkMediaBuffer},Microsoft.Skype.Bots.Media.DataSourceProvider.SendStatusChangedCallback,Microsoft.Skype.Bots.Media.DataType,Microsoft.Skype.Bots.Media.DataType,System.String)">
            <summary>
            Initialize API 
            </summary>
            <param name="enabledStreamDirections">Stream directions</param>
            <param name="dataBufferReceivedCallback">Callback called to raise media buffers</param>
            <param name="sendStatusChangedCallback">Callback called when the send status changes</param>
            <param name="sendDataType"></param>
            <param name="callId">Call id</param>
            <param name="receiveDataType"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IDataMediaSession.DeliverBuffer(Microsoft.Skype.Bots.Media.DataMediaBuffer,System.UInt32[])">
            <summary>
            Deliver a buffer
            </summary>
            <param name="buffer"></param>
            <param name="recipientIds"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataMediaReceivedEventArgs">
            <summary>
            Reserved for the internal use.
            </summary>
            Event arguments of an DataMediaReceived event.
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataMediaReceivedEventArgs.Buffer">
            <summary>
            Reserved for the internal use.
            </summary>
            The received data media buffer.
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataSendStatusChangedEventArgs">
            <summary>
            Reserved for the internal use.
            </summary>
            Event arguments of an DataSendStatusChanged event.
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSendStatusChangedEventArgs.MediaSendStatus">
            <summary>
            Reserved for the internal use.
            </summary>
            Status if socket is ready to send media.
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataSocketSettings">
            <summary>
            Reserved for the internal use.
            </summary>
            The settings to initialize the DataSocket.
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSocketSettings.#ctor">
            <summary>
            Reserved for the internal use.
            </summary>
            Constructor
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSocketSettings.StreamDirections">
            <summary>
            Reserved for the internal use.
            </summary>
            The direction of the stream
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSocketSettings.SendDataType">
            <summary>
            Reserved for the internal use.
            </summary>
            The send data type.
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSocketSettings.ReceiveDataType">
            <summary>
            Reserved for the internal use.
            </summary>
            The receive data type.
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DataSocketSettings.CallId">
            <summary>
            Reserved for the internal use.
            </summary>
            An alphanumeric string that uniquely identifies a call
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IDataSocket">
            <summary>
            Reserved for the internal use.
            </summary>
            Interface to an DataSocket.
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IDataSocket.DataMediaReceived">
            <summary>
            Reserved for the internal use.
            </summary>
            If the application has configured the DataSocket to receive media, this
            event is raised each time a packet of data media is received.
            Once the application has consumed the buffer, it must call the buffer's
            Dispose() method.
            Events are serialized, so only one event at a time is raised to the app.
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IDataSocket.DataSendStatusChanged">
            <summary>
            Reserved for the internal use.
            </summary>
            If the application has configured the DataSocket to send media, this
            event is raised to inform the application when it may begin sending
            media and when it should stop. The application cannot send media before
            receiving a MediaSendStatusChanged event indicating the SendStatus is
            Started.
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IDataSocket.Send(Microsoft.Skype.Bots.Media.DataMediaBuffer,System.UInt32[])">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IPerfCounterInstallationVerifier">
            <summary>
            Responsible for checking the registry and verifying proper perf counters are installed
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IPerfCounterInstallationVerifier.VerifyMPPerfCounterInstallation(Microsoft.Skype.Bots.Media.PerfCounterConfiguration)">
            <summary>
            Verify MP perf counter installation
            </summary>
            <param name="perfCounterConfiguration"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IPerfCounterInstallationVerifier.VerifyMediaStackPerfCounterInstallation(System.String)">
            <summary>
            Verify media stack perf counter installation
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IRegistryManager">
            <summary>
            Registry methods
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IRegistryManager.OpenLocalMachineSubKey(System.String)">
            <summary>
            Open sub key in LocalMachine
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IRegistryManager.GetSubKeyNames(Microsoft.Skype.Bots.Media.RegistryKeyWrapper)">
            <summary>
            Wrapper around RegistryKey.GetSubKeyNames
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IRegistryManager.GetProductVersion(System.String)">
            <summary>
            Get the product version from the mediaperf library in the registry
            </summary>
            <param name="registeredMediaPerfLibraryPath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IRegistryManager.GetValue(Microsoft.Skype.Bots.Media.RegistryKeyWrapper,System.String)">
            <summary>
            Wrapper around RegistryKey.GetValue
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IInternalMediaSession.AddRef">
            <summary>
            Increment the number of objects referencing this mediasession
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IInternalMediaSession.DecrementRef">
            <summary>
            Decrementing the reference to this mediasession
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.LoggingAndTelemetry.DataSocketMetricsCollector">
            <summary>
            Metrics collection class for Data sockets
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.LoggingAndTelemetry.DataSocketMetricsCollector.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.LoggingAndTelemetry.DataSocketMetricsCollector.MediaType">
            <summary>
            MediaType
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MPPerfCounterProvider">
            <summary>
            Implementation of the IMPServiceCounterProvider that can be provided to the MPAzureAppHost
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MPPerfCounterProvider.InitializeCategory(System.String,System.Collections.Generic.IList{System.String},Microsoft.Rtc.MPService.IMPServiceCounterInstance[]@)">
            <summary>
            Implementation of IMPServiceCounterProvider.InitializeCategory
            </summary>
            <param name="subCategory"></param>
            <param name="counterNames"></param>
            <param name="counterInstances"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.PerfCounterConfiguration">
            <summary>
            Perf counter configuration
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.PerfCounterConfiguration.UseMPAzureAppHostPerfCounterProvider">
            <summary>
            If set to true, will use MPAzureAppHost's default perf counter provider which uses the registered win32 perf counters
            Otherwise, will use the in-memory MPPerfCounterProvider that doesn't load win32 perf counters
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.PerfCounterConfiguration.AreEquivalent(Microsoft.Skype.Bots.Media.PerfCounterConfiguration,Microsoft.Skype.Bots.Media.PerfCounterConfiguration)">
            <summary>
            Check if two configs are equivalent
            </summary>
            <param name="configuration1"></param>
            <param name="configuration2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.PerfCounterConfiguration.ToString">
            <summary>
            ToString override
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.PerfCounterConfiguration.IsValidConfiguration(Microsoft.Skype.Bots.Media.PerfCounterConfiguration)">
            <summary>
            Checks if the config is valid
            </summary>
            <param name="perfConfig"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.PerfCounterInstallationVerifier">
            <summary>
            Responsible for checking the registry and verifying proper perf counters are installed
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.PerfCounterInstallationVerifier.RegistryManager">
            <summary>
            Calls into the registry. exposed internally for unit testing.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.PerfCounterInstallationVerifier.VerifyMPPerfCounterInstallation(Microsoft.Skype.Bots.Media.PerfCounterConfiguration)">
            <summary>
            Verify MP perf counters are installed if need be
            </summary>
            <param name="perfCounterConfiguration"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.PerfCounterInstallationVerifier.VerifyMediaStackPerfCounterInstallation(System.String)">
            <summary>
            Verify mediastack perf counters are installed if need be
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioVideoFramePlayer">
            <summary>
            AudioVideoFramePlayer is responsible for streaming real time audio and video buffers.
            This frame player will handle audio and video sync from the 
            audio and video buffer's timestamps
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.AudioVideoFramePlayer.m_enqueueOperationCompletionFlag">
            <summary>
            flag to signal enqueue operation occured
            1 means it occured
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.AudioVideoFramePlayer.LowOnFrames">
            <summary>
            Event to signal the player is low on frames
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioVideoFramePlayer.#ctor(Microsoft.Skype.Bots.Media.AudioSocket,Microsoft.Skype.Bots.Media.VideoSocket,Microsoft.Skype.Bots.Media.AudioVideoFramePlayerSettings)">
            <summary>
            Constructor for the audio video frame player.
            </summary>
            <param name="audioSocket"></param>
            <param name="videoSocket"></param>
            <param name="audioVideoFramePlayerSettings"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioVideoFramePlayer.EnqueueBuffersAsync(System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.AudioMediaBuffer},System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.VideoMediaBuffer})">
            <summary>
            Enqueue the audio and video media buffers.
            Usage should be to enqueue the same audio and video length,
            if audio and video sockets are active.
            </summary>
            <param name="audioMediaBuffers"></param>
            <param name="videoMediaBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioVideoFramePlayer.ClearAsync(System.Boolean,System.Collections.Generic.List{Microsoft.Skype.Bots.Media.VideoFormat})">
            <summary>
            Clear the enqueued buffers. 
            This will also invoke Dispose() on the buffers still in the queue.
            </summary>
            <param name="clearAudio">true will clear the audio buffers, Default value is set to true</param>
            <param name="videoFormats">list of video formats to clear, default is null</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioVideoFramePlayer.ShutdownAsync">
            <summary>
            Shuts down the player and releases allocated resources
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioVideoFramePlayerSettings">
            <summary>
            AudioVideoFramePlayer settings.
            This will help configure the player settings.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioVideoFramePlayerSettings.AudioSettings">
            <summary>
            Audio settings
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioVideoFramePlayerSettings.VideoSettings">
            <summary>
            Video Settings
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioVideoFramePlayerSettings.MinEnqueuedMediaLengthInMs">
            <summary>
            The minimum length after which the player will raise the LowOnFrames event
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioVideoFramePlayerSettings.#ctor(Microsoft.Skype.Bots.Media.AudioSettings,Microsoft.Skype.Bots.Media.VideoSettings,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="audioSettings">BufferSize needs to be set to the size of AudioMediaBuffer to be sent</param>
            <param name="videoSettings"></param>
            <param name="minEnqueuedMediaLengthInMs"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.LowOnFramesEventArgs">
            <summary>
            LowOnFrames event arguments
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.LowOnFramesEventArgs.MediaType">
            <summary>
            MediaType of the low on frame event
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.LowOnFramesEventArgs.RemainingMediaLengthInMS">
            <summary>
            Remaining enqueued media length in MS
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioLowOnFramesEventArgs">
            <summary>
            Audio low on frame event args
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoLowOnFramesEventArgs">
            <summary>
            Video low on frame event args
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoLowOnFramesEventArgs.VideoFormat">
            <summary>
            The video format for the low on frame event
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoFramePlayer">
            <summary>
            Video frame player
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFramePlayer.LowOnFrames">
            <summary>
            Event to signal the player is low on frames from the specified settings
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoFramePlayer.TotalNumberOfEnqueuedFrames">
            <summary>
            Number of enqueued frames 
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoFramePlayer.TotalNumberOfDequeuedFrames">
            <summary>
            Number of frames sent to the provider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFramePlayer.#ctor(Microsoft.Skype.Bots.Media.VideoSocket,Microsoft.Skype.Bots.Media.VideoSettings)">
            <summary>
            Constructor
            </summary>
            <param name="videoSocket"></param>
            <param name="videoSettings"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFramePlayer.ClearAsync(System.Collections.Generic.List{Microsoft.Skype.Bots.Media.VideoFormat})">
            <summary>
            Clears the videoBuffers. If no format is configured it will clear all
            </summary>
            <param name="videoFormats"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFramePlayer.EnqueueBuffersAsync(System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.VideoMediaBuffer})">
            <summary>
            Enqueue asynchronously video media buffers
            </summary>
            <param name="videoMediaBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFramePlayer.ShutdownAsync">
            <summary>
            This will shutdown the player, clean up the queue and remaining buffers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFramePlayer.DequeueAndProcessAsync(Microsoft.Skype.Bots.Media.VideoPlayerQueue)">
            <summary>
            Dequeue and process mediabuffers in a serialized way: 1 at a time
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoSettings">
            <summary>
            Video Frame player settings
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSettings.MinEnqueuedVideoLengthInMs">
            <summary>
            The minimum enqueued video length after which,
            The video player will raise a low frame event
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoFramePlayerLowOnFramesEventArgs">
            <summary>
            Video frame player event low frame event args
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoFramePlayerLowOnFramesEventArgs.CurrentEnqueuedVideoLengthInMs">
            <summary>
            Current remaining enqueued video in ms 
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.RiffChunk">
            <summary>
            This class will hold information about RIFF chunk found in the wav headers
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.RiffChunk.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            RIFF chunk contains information collected from the headers
            </summary>
            <param name="id">id</param>
            <param name="length">length of the struct</param>
            <param name="position">position in the headers</param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IAudioVideoFramePlayer">
            <summary>
            Interface for the AudioVideoFramePlayer responsible for streaming
            real time audio video
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IAudioVideoFramePlayer.LowOnFrames">
            <summary>
            This event will be raised if the player is low on frames
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAudioVideoFramePlayer.EnqueueBuffersAsync(System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.AudioMediaBuffer},System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.VideoMediaBuffer})">
            <summary>
            Enqueue the audio and video media buffers.
            Usage should be to enqueue the same audio and video length,
            if audio and video socket are active.
            </summary>
            <param name="audioMediaBuffers"></param>
            <param name="videoMediaBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAudioVideoFramePlayer.ClearAsync(System.Boolean,System.Collections.Generic.List{Microsoft.Skype.Bots.Media.VideoFormat})">
            <summary>
             Clears media buffers from the param settings, if nothing is specified
             it will clear all the audio and video buffers that are in the queue
            </summary>
            <param name="clearAudio">true will clear the audio buffers, default value is set to true</param>
            <param name="videoFormats">list of video formats to clear, default value is null</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAudioVideoFramePlayer.ShutdownAsync">
            <summary>
            This will shutdown the player and clean the associated resources
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MultimediaTimer">
            <summary>
            An extension to task delay based on the multimedia timer API with 1ms precision.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MultimediaTimer.NativeMethods.TimeSetEvent(System.UInt32,System.UInt32,Microsoft.Skype.Bots.Media.MultimediaTimer.MultimediaTimerCallback,System.UInt32@,System.UInt32)">
            <summary>
            This will create a timer event that will raise a callback after the msDelay specified.
            </summary>
            <param name="msDelay"></param>
            <param name="msResolution"></param>
            <param name="callback"></param>
            <param name="userCtx"></param>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceProvider.Initialize">
            <summary>
            Initializes the consumer of the queue to wait for new items and process them if available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceProvider.DequeueAndProcessAsync">
            <summary>
            Dequeue and process mediabuffers in a serialized way: 1 at a time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceProvider.EnqueueAsync(Microsoft.Skype.Bots.Media.Wrappers.MediaBufferWrapper)">
            <summary>
            Enqueue a mediabuffer
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceProvider.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceProvider.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceProvider.Shutdown">
            <summary>
            ShutDown the queue, this will also cancel current operations
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaConfiguration">
            <summary>
            Class that stores the media configuration information
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.MPUri">
            <summary>
            The MP Uri
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.AudioRenderContexts">
            <summary>
            The audio render contexts
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.VideoRenderContexts">
            <summary>
            The video render contexts
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.VbssRenderContexts">
            <summary>
            The vbss render contexts
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.AudioSourceContexts">
            <summary>
            The audio source contexts
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.VideoSourceContexts">
            <summary>
            The video source contexts
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.VbssSourceContexts">
            <summary>
            The vbss source contexts
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.DataRenderContexts">
            <summary>
            Gets or sets the data render contexts.
            </summary>
            <value>
            The data render contexts.
            </value>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.DataSourceContexts">
            <summary>
            Gets or sets the data source contexts.
            </summary>
            <value>
            The data source contexts.
            </value>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.SupportedAudioFormat">
            <summary>
            The supported audio format
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.VideoSinkEncodingFormats">
            <summary>
            Gets or sets the video sink encoding formats
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.VbssSinkEncodingFormats">
            <summary>
            Gets or sets the vbss sink encoding formats
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.InitialScreenSharingRole">
            <summary>
            Gets or sets the initial screen-sharing role
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.MPMediaSessionId">
            <summary>
            Gets or sets the MP media session identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.RegionAffinity">
            <summary>
            Gets or sets the azure region of the supporting media infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.SkypeMediaBotsVersion">
            <summary>
            Gets or sets the skype media bots version.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.MediaStackVersion">
            <summary>
            Gets or sets the skype media bots version.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaConfiguration.MPVersion">
            <summary>
            Gets or sets the MP version.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.ScreenSharingRole">
            <summary>
            Reserved for internal use
            </summary>
            Screen sharing role
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ScreenSharingRole.None">
            <summary>
            Reserved for internal use
            </summary>
            None (Inactive)
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ScreenSharingRole.Viewer">
            <summary>
            Reserved for internal use
            </summary>
            Viewer role
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ScreenSharingRole.Sharer">
            <summary>
            Reserved for internal use
            </summary>
            Sharer role
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaPlatformInstanceSettings">
            <summary>
            Class that stores the settings of the Azure instance hosting the Bot Media Platform.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaPlatformInstanceSettings.ServiceFqdn">
            <summary>
            The FQDN of the Azure service hosting the Media Platform.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaPlatformInstanceSettings.InstancePublicIPAddress">
            <summary>
            Provides Instance-Level Public IP address.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaPlatformInstanceSettings.InstancePublicPort">
            <summary>
            Provides Instance InputEndpoint public port.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaPlatformInstanceSettings.InstanceInternalPort">
            <summary>
            Provides Instance InputEndpoint internal port.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaPlatformInstanceSettings.CertificateThumbprint">
            <summary>
            Thumbprint of a local server certificate to support MTLS authentication of the
            Media Platform's WCF service endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaPlatformSettings">
            <summary>
            Class that stores settings needed to initialize Bot Media Platform.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaPlatformSettings.MediaPlatformInstanceSettings">
            <summary>
            The media platform instance settings.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaPlatformSettings.ApplicationId">
            <summary>
            String that uniquely identifies the application that initializes the platform.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaPlatformSettings.RegionAffinity">
            <summary>
            Reserved for the internal use.
            </summary>
            Azure region of the supporting media infrastructure.
            For example: For the application to be deployed is in West US, having West US region affinity for the supporting media infrastructure could be preferrable.
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaPlatformFactory">
            <summary>
            MediaPlatformFactory that is used to create IMediaPlatform.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatformFactory.CreateMediaPlatform">
            <summary>
            Creates the Media Platform for bots. The platform has to be initialized before it is used.
            </summary>
            <returns>The interface to the Media Platform.</returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaPlatform">
            <summary>
            This class represents the Skype Bots Media Platform. 
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaPlatform.Name">
            <summary>
            Name of the Bots Media Platform
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaPlatform.MinNumberOfCoresRequired">
            <summary>
            The minimum number of cores that the Media Platform requires.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.MediaPlatform.MaxNumberOfVideoSocketsPerCall">
            <summary>
            The max number of video sockets that can be passed to the CreateMediaConfiguration API.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.Initialize(Microsoft.Skype.Bots.Media.MediaPlatformSettings)">
            <summary>
            Initializes the Media Platform for Bot.
            </summary>
            <param name="settings">Settings to initialize the Bot Media Platform.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.Initialize(Microsoft.Skype.Bots.Media.MediaPlatformSettings,Microsoft.Skype.Internal.Bots.Media.IConfigurationManager,System.Boolean)">
            <summary>
            Internal overload to the Initialize API exposing config manager and IsTest
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket)">
            <summary>
            Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for the audio modality.
            </summary>
            <param name="audioSocket">Socket that handles audio.</param>
            <returns>Serialized MediaConfiguration object.</returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for each modality.
            </summary>
            <param name="audioSocket">Socket that handles audio.</param>
            <param name="videoSocket">Socket that handles video.</param>
            <returns>Serialized MediaConfiguration object.</returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket})">
            <summary>
            Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for each modality.
            </summary>
            <param name="audioSocket">Socket that handles audio.</param>
            <param name="videoSockets">Ordered list of video sockets. The order in which the sockets are provided maps to the order of the streams exposed by MediaPaaS 
            (eg. the first video socket in the list will correspond to the first video stream exposed in the list of MediaStreams in MediaPaaS' MediaFlow resource). 
            If multiview sockets are provided, only the first one can have a send direction (ie. send only or send receive) and all the sockets should have
            a receive direction.</param>
            <returns>Serialized MediaConfiguration object.</returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket},Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for each modality.
            </summary>
            <param name="audioSocket"></param>
            <param name="videoSockets">Ordered list of video sockets. The order in which the sockets are provided maps to the order of the streams exposed by MediaPaaS 
            (eg. the first video socket in the list will correspond to the first video stream exposed in the list of MediaStreams in MediaPaaS' MediaFlow resource). 
            If multiview sockets are provided, only the first one can have a send direction (ie. send only or send receive) and all the sockets should have
            a receive direction.</param>
            <param name="vbssSocket">Video socket for the video-based screen sharing (VBSS) modality. Socket must be configured as RecvOnly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            Returns a serialized mediaConfiguration object, containing MP URI and render/source contexts for each modality.
            </summary>
            <param name="vbssSocket">Video socket for the video-based screen sharing (VBSS) modality. Socket must be configured as RecvOnly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,Microsoft.Skype.Bots.Media.IDataSocket)">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket},Microsoft.Skype.Bots.Media.IVideoSocket,Microsoft.Skype.Bots.Media.IDataSocket)">
            <summary>
            Reserved for the internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaPlatform.Shutdown">
            <summary>
            Shuts down the Bot Media Platform.
            </summary>        
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.RenderMediaSession">
            <summary>
            Class that represents a render media session.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.RenderMediaSession.RenderSessionData">
            <summary>
            The render session data
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.RenderMediaSession.#ctor(Microsoft.Rtc.Internal.Media.MediaApi.MediaModality,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="modality"></param>
            <param name="mediaBufferReadyCallback"></param>
            <param name="callId"></param>
            <param name="bypassDecoding"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.RenderMediaSession.#ctor(Microsoft.Rtc.Internal.Media.MediaApi.MediaModality,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack,System.String,System.Boolean,Microsoft.Skype.Bots.Media.IMediaApiRenderSession)">
            <summary>
            Constructor - with wrapper for unit testing
            </summary>
            <param name="modality"></param>
            <param name="mediaBufferReadyCallback"></param>
            <param name="callId"></param>
            <param name="bypassDecoding"></param>
            <param name="mediaApiRenderSession">MediaApiRenderSession wrapper, for unit testing purposes.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.RenderMediaSession.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.AudioFramePlayer.m_preAllocatedMediaBufferQueue">
            <summary>
            Pre-Allocated queue for the mediaApi buffers. Using this queue will avoid having a timer,
            which could be expensive and degrading the audio quality.
            Whenever MediaApi consumes a buffer, this one will return to the pool allowing the player to send a new one. 
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.AudioFramePlayer.m_sendMediaBufferQueue">
            <summary>
            AudioMediaBuffer queue, this is where the buffers are getting pushed from the app layer to the 
            Player
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.AudioFramePlayer.LowOnFrames">
            <summary>
            Event to signal the player is low on frames
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioFramePlayer.TotalNumberOfEnqueuedFrames">
            <summary>
            Number of enqueued frames in the send queue
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioFramePlayer.TotalNumberOfDequeuedFrames">
            <summary>
            Number of dequeued frames from the send queue
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioFramePlayer.#ctor(Microsoft.Skype.Bots.Media.AudioSocket,Microsoft.Skype.Bots.Media.AudioSettings)">
            <summary>
            Constructor for the audio frame player
            </summary>
            <param name="audioSocket"></param>
            <param name="audioSettings"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioFramePlayer.ClearAsync">
            <summary>
            This will clear the buffers from the send queue and invoke dipose on these buffers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioFramePlayer.EnqueueBuffersAsync(System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.AudioMediaBuffer})">
            <summary>
            Enqueue operation
            </summary>
            <param name="audioMediaBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioFramePlayer.ShutdownAsync">
            <summary>
            Shuts down the player and clean up associated resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioFramePlayer.DequeueAndProcessAsync">
            <summary>
            Dequeue and process mediabuffers in a serialized way: 1 at a time
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioSettings">
            <summary>
            Audio frame player settings 
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSettings.BufferSizeInMs">
            <summary>
            Audio buffer length in ms
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSettings.MinEnqueuedAudioLengthInMs">
            <summary>
            The minimum enqueued audio length after which,
            The audio player will raise a low frame event
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSettings.#ctor(System.UInt32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioFramePlayerLowOnFramesEventArgs">
            <summary>
            Audio frame player event low frame event args
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioFramePlayerLowOnFramesEventArgs.CurrentEnqueuedAudioLengthInMs">
            <summary>
            Current remaining enqueued audio in ms
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.ToneId">
            <summary>
            DTMF Tone Id enum.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone0">
            <summary>
            Tone 0
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone1">
            <summary>
            Tone 1
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone2">
            <summary>
            Tone 2
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone3">
            <summary>
            Tone 3
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone4">
            <summary>
            Tone 4
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone5">
            <summary>
            Tone 5
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone6">
            <summary>
            Tone 6
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone7">
            <summary>
            Tone 7
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone8">
            <summary>
            Tone 8
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Tone9">
            <summary>
            Tone 9
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Star">
            <summary>
            Star tone
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Pound">
            <summary>
            Pound tone
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.A">
            <summary>
            Tone A
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.B">
            <summary>
            Tone B
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.C">
            <summary>
            Tone C
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.D">
            <summary>
            Tone D
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.ToneId.Flash">
            <summary>
            Tone flash
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoSinkEncodingFormat">
            <summary>
            VideoSinkEncodingFormats
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoSinkEncodingFormat.Yuv">
            <summary>
            Yuv
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoSinkEncodingFormat.H264">
            <summary>
            H264
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoColorFormat">
            <summary>
            VideoColorFormat
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoColorFormat.NV12">
            <summary>
            NV12
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoColorFormat.Rgb24">
            <summary>
            RGB24
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoColorFormat.Yuy2">
            <summary>
            YUY2
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoColorFormat.H264">
            <summary>
            H264
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoFormat">
            <summary>
            VideoFormat
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoFormat.VideoColorFormat">
            <summary>
            VideoColorFormat
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoFormat.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoFormat.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoFormat.FrameRate">
            <summary>
            Frame rate
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoFormat.BitRate">
            <summary>
            Bit rate
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.#ctor(Microsoft.Skype.Bots.Media.VideoColorFormat,System.Int32,System.Int32,System.Single,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="videoColorFormat"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="frameRate"></param>
            <param name="bitRate"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.Equals(Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Equals to compare videoformat objects
            </summary>
            <param name="videoFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.Equals(System.Object)">
            <summary>
            Overrides base Equals to compare objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.op_Equality(Microsoft.Skype.Bots.Media.VideoFormat,Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Overload == operator to do VideoFormat comparison
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.op_Inequality(Microsoft.Skype.Bots.Media.VideoFormat,Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Overload != operator to do VideoFormat comparison
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.GetHashCode">
            <summary>
            Custom GetHashCode implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.GetResolutionId">
            <summary>
            Returns a unique id from the video format, width and height
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.GetId">
            <summary>
            Returns a unique id from the video format, width and height
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1920x1080_30Fps">
            <summary>
            YUY2 1920x1080 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1920x1080_15Fps">
            <summary>
            YUY2 1920x1080 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1920x1080_7_5Fps">
            <summary>
            YUY2 1920x1080 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1920x1080_3_75Fps">
            <summary>
            YUY2 1920x1080 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1920x1080_1_875Fps">
            <summary>
            YUY2 1920x1080 1.875fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1280x720_30Fps">
            <summary>
            YUY2 1280x720 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1280x720_15Fps">
            <summary>
            YUY2 1280x720 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1280x720_7_5Fps">
            <summary>
            YUY2 1280x720 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1280x720_3_75Fps">
            <summary>
            YUY2 1280x720 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1280x720_1_875Fps">
            <summary>
            YUY2 1280x720 1.875fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_960x540_30Fps">
            <summary>
            YUY2 960x540 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_848x480_30Fps">
            <summary>
            YUY2 848x480 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_640x360_30Fps">
            <summary>
            YUY2 640x360 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_640x360_15Fps">
            <summary>
            YUY2 640x360 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_424x240_15Fps">
            <summary>
            YUY2 424x240 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_480x270_15Fps">
            <summary>
            YUY2 480x270 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_320x180_15Fps">
            <summary>
            YUY2 320x180 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_1080x1920_30Fps">
            <summary>
            YUY2 1080x1920 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_720x1280_30Fps">
            <summary>
            YUY2 720x1280 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_540x960_30Fps">
            <summary>
            YUY2 540x960 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_480x848_30Fps">
            <summary>
            YUY2 480x848 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_360x640_30Fps">
            <summary>
            YUY2 360x640 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_360x640_15Fps">
            <summary>
            YUY2 360x640 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_240x424_15Fps">
            <summary>
            YUY2 240x424 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_270x480_15Fps">
            <summary>
            YUY2 270x480 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Yuy2_180x320_30Fps">
            <summary>
            YUY2 180x320 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1920x1080_30Fps">
            <summary>
            Rgb24 1920x1080 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1920x1080_15Fps">
            <summary>
            Rgb24 1920x1080 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1920x1080_7_5Fps">
            <summary>
            Rgb24 1920x1080 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1920x1080_3_75Fps">
            <summary>
            Rgb24 1920x1080 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1920x1080_1_875Fps">
            <summary>
            Rgb24 1920x1080 1.875fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1280x720_30Fps">
            <summary>
            Rgb24 1280x720 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1280x720_15Fps">
            <summary>
            Rgb24 1280x720 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1280x720_7_5Fps">
            <summary>
            Rgb24 1280x720 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1280x720_3_75Fps">
            <summary>
            Rgb24 1280x720 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1280x720_1_875Fps">
            <summary>
            Rgb24 1280x720 1.875fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_960x540_30Fps">
            <summary>
            Rgb24 960x540 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_848x480_30Fps">
            <summary>
            Rgb24 848x480 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_640x360_30Fps">
            <summary>
            Rgb24 640x360 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_640x360_15Fps">
            <summary>
            Rgb24 640x360 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_424x240_15Fps">
            <summary>
            Rgb24 424x240 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_480x270_15Fps">
            <summary>
            Rgb24 480x270 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_320x180_15Fps">
            <summary>
            Rgb24 320x180 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_1080x1920_30Fps">
            <summary>
            Rgb24 1080x1920 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_720x1280_30Fps">
            <summary>
            Rgb24 720x1280 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_540x960_30Fps">
            <summary>
            Rgb24 540x960 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_480x848_30Fps">
            <summary>
            Rgb24 480x848 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_360x640_30Fps">
            <summary>
            Rgb24 360x640 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_360x640_15Fps">
            <summary>
            Rgb24 360x640 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_240x424_15Fps">
            <summary>
            Rgb24 240x424 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_270x480_15Fps">
            <summary>
            Rgb24 270x480 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.Rgb24_180x320_30Fps">
            <summary>
            Rgb24 180x320 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1920x1080_30Fps">
            <summary>
            NV12 1920x1080 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1920x1080_15Fps">
            <summary>
            NV12 1920x1080 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1920x1080_7_5Fps">
            <summary>
            NV12 1920x1080 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1920x1080_3_75Fps">
            <summary>
            NV12 1920x1080 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1920x1080_1_875Fps">
            <summary>
            NV12 1920x1080 1.875fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1280x720_30Fps">
            <summary>
            NV12 1280x720 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1280x720_15Fps">
            <summary>
            NV12 1280x720 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1280x720_7_5Fps">
            <summary>
            NV12 1280x720 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1280x720_3_75Fps">
            <summary>
            NV12 1280x720 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1280x720_1_875Fps">
            <summary>
            NV12 1280x720 1.875fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_960x540_30Fps">
            <summary>
            NV12 960x540 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_848x480_30Fps">
            <summary>
            NV12 848x480 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_640x360_30Fps">
            <summary>
            NV12 640x360 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_640x360_15Fps">
            <summary>
            NV12 640x360 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_424x240_15Fps">
            <summary>
            NV12 424x240 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_480x270_15Fps">
            <summary>
            NV12 480x270 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_320x180_15Fps">
            <summary>
            NV12 320x180 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_1080x1920_30Fps">
            <summary>
            NV12 1080x1920 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_720x1280_30Fps">
            <summary>
            NV12 720x1280 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_540x960_30Fps">
            <summary>
            NV12 540x960 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_480x848_30Fps">
            <summary>
            NV12 480x848 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_360x640_30Fps">
            <summary>
            NV12 360x640 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_360x640_15Fps">
            <summary>
            NV12 360x640 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_240x424_15Fps">
            <summary>
            NV12 240x424 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_270x480_15Fps">
            <summary>
            NV12 270x480 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.NV12_180x320_30Fps">
            <summary>
            NV12 180x320 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1920x1080_30Fps">
            <summary>
            H264 1920x1080 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1920x1080_15Fps">
            <summary>
            H264 1920x1080 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1920x1080_7_5Fps">
            <summary>
            H264 1920x1080 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1920x1080_3_75Fps">
            <summary>
            H264 1920x1080 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1920x1080_1_875Fps">
            <summary>
            H264 1920x1080 1.875fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1280x720_30Fps">
            <summary>
            H264 1280x720 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1280x720_15Fps">
            <summary>
            H264 1280x720 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1280x720_7_5Fps">
            <summary>
            H264 1280x720 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1280x720_3_75Fps">
            <summary>
            H264 1280x720 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_1280x720_1_875Fps">
            <summary>
            H264 1280x720 1.875fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_960x540_30Fps">
            <summary>
            H264 960x540 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_640x360_30Fps">
            <summary>
            H264 640x360 30fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_640x360_15Fps">
            <summary>
            H264 640x360 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_424x240_15Fps">
            <summary>
            H264 424x240 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_320x180_15Fps">
            <summary>
            H264 320x180 15fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_320x180_7_5Fps">
            <summary>
            H264 320x180 7.5fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_320x180_3_75Fps">
            <summary>
            H264 320x180 3.75fps video format
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoFormat.H264_320x180_1_875Fps">
            <summary>
            H264 320x180 1.875fps video format
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.ToString">
            <summary>
            Provides video format details by overriding the default ToString().
            </summary>
            <returns>Details of VideoFormat.</returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoFormat.ToShortenedString">
            <summary>
            Provides a shortened version of the ToString() method
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoMediaBuffer">
            <summary>
            Represents an unmanaged buffer containing video media data.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaBuffer.Data">
            <summary>
            Pointer to the unmanaged media buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaBuffer.Length">
            <summary>
            The length of data in the media buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaBuffer.VideoFormat">
            <summary>
            VideoFormat of the video media buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaBuffer.OriginalVideoFormat">
            <summary>
            Original VideoFormat of the buffer when it was sourced. It is only used when receiving video buffers 
            via the IVideoSocket.VideoMediaReceived event handler, in which case the VideoMediaBuffer.VideoFormat 
            property may have different Width and Height values than the OriginalVideoFormat property, which represents 
            the original format of the buffer. The reason is that the buffer may have been resized before being 
            transmitted, so the original Width and Height may have been resized. If the Width and Height 
            properties of OriginalVideoFormat differ from the VideoFormat property, the consumer of the 
            VideoMediaBuffer raised in the VideoMediaReceived event should resize the buffer to fit the 
            OriginalVideoFormat size.
            When sending buffers via the IVideoSocket.Send API, this property should always be null.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaBuffer.Stride">
            <summary>
            Stride of the video buffer. This property is optional when sourcing video 
            buffers that are sent via the IVideoSocket.Send API.
            Stride (also called pitch) represents the number of bytes it takes to read one row 
            of pixels in memory. It may differ from  the width depending on the color format.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaBuffer.MediaSourceId">
            <summary>
            MediaSourceId (MSI) of the video buffer. Within group or conference video calls, the MSI value 
            identifies the video media source.
            This property is populated by the Real-Time Media Platform for Bots on received video buffers. When 
            sending buffers via the IVideoSocket.Send API, this property is unused.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaBuffer.Timestamp">
            <summary>
            Timestamp of when the media content was sourced, in 100-ns units.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoMediaBuffer.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoMediaBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources held by the buffer object.
            Must be implemented in the derived class.
            </summary>
            <param name="disposing">
            If true, both managed and unmanaged resources can be
            disposed.
            If false, only unmanaged resources can be disposed.</param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoRenderMediaBuffer">
            <summary>
            The class is used when a video media buffer is received on a video
            socket. Application will receive an instance of this class as the type of
            VideoMediaBuffer.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoRenderMediaBuffer.#ctor(Microsoft.Rtc.Internal.Media.MediaApi.MediaBuffer,Microsoft.Skype.Bots.Media.VideoColorFormat)">
            <summary>
            Constructor
            </summary>
            <param name="internalBuffer"></param>
            <param name="format"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoMediaSession">
            <summary>
            Class that represents a video media session.
            Implements IDisposable because it instantiates a ISourceConsumerWrapper object which is IDisposable
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaSession.RenderContext">
            <summary>
            The render context
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaSession.SourceContext">
            <summary>
            The source context
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.VideoFormat},System.UInt32,Microsoft.Skype.Bots.Media.VideoSourceProvider.SendStatusChangedCallback,Microsoft.Skype.Bots.Media.VideoSourceProvider.KeyFrameNeededCallback,System.String,System.Boolean)">
            <summary>
            Initialize
            </summary>
            <param name="enabledStreamDirections">Stream directions</param>
            <param name="mediaBufferReadyCallback">Callback called to raise media buffers</param>
            <param name="supportedVideoFormatList">List of supported video formats</param>
            <param name="maxConcurrentStreams">Maximum number of concurrent streams that can be sent</param>
            <param name="sendStatusChangedCallback">Callback called when the send status changes</param>
            <param name="keyFrameNeededCallback">Callback called when key frame is needed</param>
            <param name="callId">Call id</param>
            <param name="bypassDecoding">bypass decoding for H264 receive</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.VideoFormat},System.UInt32,Microsoft.Skype.Bots.Media.VideoSourceProvider.SendStatusChangedCallback,Microsoft.Skype.Bots.Media.VideoSourceProvider.KeyFrameNeededCallback,System.String,System.Boolean,Microsoft.Skype.Bots.Media.IMediaApiVideoSourceConsumer)">
            <summary>
            Initialize API - with a wrapper hook for unit tests
            </summary>
            <param name="enabledStreamDirections">Stream directions</param>
            <param name="mediaBufferReadyCallback">Callback called to raise media buffers</param>
            <param name="supportedVideoFormatList">List of supported video formats</param>
            <param name="maxConcurrentStreams">Maximum number of concurrent streams that can be sent</param>
            <param name="sendStatusChangedCallback">Callback called when the send status changes</param>
            <param name="keyFrameNeededCallback">Callback called when key frame is needed</param>
            <param name="callId">Call id</param>
            <param name="bypassDecoding">bypass decoding for H264 receive</param>
            <param name="sourceConsumer">A wrapper around the MediaApi source consumer. Used for unit testing only, otherwise the other Initialize API should be called.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoMediaSession.DeliverBuffer(Microsoft.Skype.Bots.Media.VideoMediaBuffer)">
            <summary>
            Delivers buffer
            </summary>
            <param name="videoMediaBuffer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoMediaSession.Dispose">
            <summary>
            Disposes media session
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoMediaSession.AttachMediaPlayer(Microsoft.Skype.Bots.Media.IMediaPlayer)">
            <summary>
            This will attach the media player to the video media Provider
            </summary>
            <param name="videoMediaPlayer"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoSocket">
            <summary>
            Provides Send and Receive I/O access to a video stream.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoSocket.m_eventNotificationQueue">
            <summary>
            The event notifications queue serializes the workitems and runs them on the threadpool
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.VideoSocket.VideoMediaReceived">
            <summary>
            If the application has configured the VideoSocket to receive media, this
            event is raised each time a packet of video media is received.
            Once the application has consumed the buffer, it must call the buffer's
            Dispose() method.
            The application should be prepared to handle approximately 30 incoming
            video buffers per second.
            Events are serialized, so only one event at a time is raised to the app.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.VideoSocket.VideoSendStatusChanged">
            <summary>
            If the application has configured the VideoSocket to send media, this
            event is raised to inform the application when it may begin sending
            media and when it should stop. The application cannot send media before
            receiving a VideoMediaSendStatusChanged event indicating the SendStatus is 
            Active, such media will be discarded.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.VideoSocket.VideoKeyFrameNeeded">
            <summary>
            If the application has configured the VideoSocket to receive encoded media, this
            event is raised each time a key frame is needed.
            Events are serialized, so only one event at a time is raised to the app.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocket.SocketId">
            <summary>
            The 0-based ID of the socket. This socket ID is useful to identify a socket in a 
            multiview (ie. more than 1 video socket) call. The same ID is used in the event 
            args of the VideoMediaReceived and VideoSendStatusChanged events that this class
             may raise. The socket ID property will be present in both single view and multiview 
            cases. The ID maps to the order in which the video sockets are provided to the 
            CreateMediaConfiguration API. 
            Eg., if the collection of IVideoSocket objects in the CreateMediaConfiguration API contains 
            {socketA, socketB, socketC}, the sockets will have the ID mapping of: 0 for socketA, 
            1 for socketB and 2 for socketC.
            Before the call to CreateMediaConfiguration, the SocketId has a value of -1.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocket.ReceiveColorFormat">
            <summary>
            VideoColorFormat to receive
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocket.MediaType">
            <summary>
            Media type to indicate whether socket is for video or vbss
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocket.RenderContext">
            <summary>
            The render context of this video socket.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocket.SourceContext">
            <summary>
            The source context of this video socket.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocket.StreamDirection">
            <summary>
            The stream direction of the video socket
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.VideoSocket.m_h264NalUnitDecoders">
            <summary>
            Nalunit decoders, to validate h264 frames on the send pipeline
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocket.#ctor(Microsoft.Skype.Bots.Media.VideoSocketSettings)">
            <summary>
            Initializes a new instance of VideoSocket with VideoSocketSettings.
            </summary>
            <param name="settings">Settings for VideoSocket like Direction, ReceiveColorFormat, etc.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocket.#ctor(Microsoft.Skype.Bots.Media.VideoSocketSettings,System.Boolean)">
            <summary>
            Initializes a new instance of VideoSocket with VideoSocketSettings.
            </summary>
            <param name="settings">Settings for VideoSocket like Direction, ReceiveColorFormat, etc.</param>
            <param name="isTest">Used to differentiate telemetry STs from prod telemetry - it will mark socket metrics with a test tag or not. 
            It's different than the MediaPlatform's isTest initialization property which is used to tag ALL events with a test tag</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocket.#ctor(Microsoft.Skype.Bots.Media.VideoSocketSettings,Microsoft.Skype.Bots.Media.IVideoMediaSession,Microsoft.Skype.Bots.Media.IVideoSocketMetricsCollector,System.Boolean)">
            <summary>
            Internal constructor for unit testing
            </summary>
            <param name="settings"></param>
            <param name="mediaSession"></param>
            <param name="metricsCollector"></param>
            <param name="isTest">Used to differentiate telemetry STs from prod telemetry - it will mark socket metrics with a test tag or not. 
            It's different than the MediaPlatform's isTest initialization property which is used to tag ALL events with a test tag</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocket.Send(Microsoft.Skype.Bots.Media.VideoMediaBuffer)">
            <summary>
            Allows the application to send a packet of video media if the application
            has configured the VideoSocket to send media.
            The application should be sending about 30 video frame buffers/second.
            The application must create a concrete class which derives from the
            VideoMediaBuffer abstract class. The buffer object passed to the Send
            method is still potentially in-use after the method returns to the
            caller. The application must not free the buffer's data until the
            the buffer object's Dispose() method is invoked by the Media Platform.
            </summary>
            <param name="buffer">VideoMediaBuffer to send.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocket.RequestKeyFrame">
            <summary>
            Allows the application to request for key frame.
            Only valid for sockets with the ReceiveColorFormat as H264
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocket.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoSourceProvider">
            <summary>
            Class that represents a video source provider.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSourceProvider.#ctor(System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.VideoFormat},System.UInt32,Microsoft.Skype.Bots.Media.VideoSourceProvider.SendStatusChangedCallback,System.String,Microsoft.Skype.Bots.Media.VideoSourceProvider.KeyFrameNeededCallback,Microsoft.Skype.Bots.Media.IMediaApiVideoSourceConsumer)">
            <summary>
            Constructor
            </summary>
            <param name="supportedVideoFormatList"></param>
            <param name="maxConcurrentStreams"></param>
            <param name="callback"></param>
            <param name="keyFrameNeededCallback"></param>
            <param name="callId"></param>
            <param name="videoConsumer"></param>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSourceProvider.RecentSendVideoFormat">
            <summary>
            Recent send video format used for sending buffer by app
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSourceProvider.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSourceProvider.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.ExceptionConstants">
            <summary>
            All exception constants
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.SkypeMediaException">
            <summary>
            Root class for the exceptions that are specific to the Skype Media Bots SDK,
            ie. exceptions other than the standard .NET Framework exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SkypeMediaException.#ctor">
            <summary>
            SkypeMediaException constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SkypeMediaException.#ctor(System.String)">
            <summary>
            SkypeMediaException constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IAriaClient">
            <summary>
             Client interface around the class that writes to Aria
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAriaClient.Initialize(System.String)">
            <summary>
            Initialize
            </summary>
            <param name="tenantToken"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAriaClient.SetContext(System.String,System.String)">
            <summary>
            Set the context
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAriaClient.MonitorUnhandledExceptions">
            <summary>
            Start monitoring unhandled exceptions
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAriaClient.LogEvent(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Log an event
            </summary>
            <param name="eventName"></param>
            <param name="eventProperties"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioMediaReceivedEventArgs">
            <summary>
            Event arguments of an AudioMediaReceived event.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioMediaReceivedEventArgs.Buffer">
            <summary>
            The received audio media buffer.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioSendStatusChangedEventArgs">
            <summary>
            Event arguments of an AudioSendStatusChanged event.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSendStatusChangedEventArgs.MediaSendStatus">
            <summary>
            Status if socket is ready to send media.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.ToneReceivedEventArgs">
            <summary>
            Event arguments of the ToneReceived event.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ToneReceivedEventArgs.Tone">
            <summary>
            Tone id
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DominantSpeakerChangedEventArgs">
            <summary>
            Event arguments of the DominantSpeakerChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.DominantSpeakerChangedEventArgs.None">
            <summary>
            Constant value which indicates there is no dominant speaker in the conference.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DominantSpeakerChangedEventArgs.DominantSpeakerHistory">
            <summary>
            History of the dominant speakers.
            However, DominantSpeakerHistory won't contain any element to indicate the absence of dominant speaker in the conference.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.DominantSpeakerChangedEventArgs.CurrentDominantSpeaker">
            <summary>
            Current dominant speaker in the conference. 
            The value is the MediaSourceId (MSI) of the dominant speaker in the conference.
            If there is no dominant speaker in the conference this value will be None (0xFFFFFFFF).
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioFormat">
            <summary>
            The audio format.
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.AudioFormat.Pcm16K">
            <summary>
            PCM 16K
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.AudioFormat.Pcm44KStereo">
            <summary>
            PCM 44.1K Stereo
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioSocketSettings">
            <summary>
            The settings to initialize the AudioSocket.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocketSettings.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocketSettings.StreamDirections">
            <summary>
            The direction of the stream
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocketSettings.SupportedAudioFormat">
            <summary>
            The supported send/receive audio format.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocketSettings.CallId">
            <summary>
            An alphanumeric string that uniquely identifies a call
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IAudioSocket">
            <summary>
            Interface to an AudioSocket.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IAudioSocket.AudioMediaReceived">
            <summary>
            If the application has configured the AudioSocket to receive media, this
            event is raised each time a packet of audio media is received.
            Once the application has consumed the buffer, it must call the buffer's
            Dispose() method.
            The application must be able to handle at least 50 incoming audio buffers
            per second.
            Events are serialized, so only one event at a time is raised to the app.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IAudioSocket.AudioSendStatusChanged">
            <summary>
            If the application has configured the AudioSocket to send media, this
            event is raised to inform the application when it may begin sending
            media and when it should stop. The application cannot send media before
            receiving a MediaSendStatusChanged event indicating the SendStatus is 
            Started.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IAudioSocket.DominantSpeakerChanged">
            <summary>
            This event is raised when there is a change in the dominant speaker in the conference.
            If there is no dominant speaker in the conference, the CurrentDominantSpeaker argument in the event will have the value None (0xFFFFFFFF).
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IAudioSocket.ToneReceived">
            <summary>
            This event is raised when the DTMF tone is received. ToneId enum in the event arguments indicates the tone value.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAudioSocket.Send(Microsoft.Skype.Bots.Media.AudioMediaBuffer)">
            <summary>
            Allows the application to send a packet of audio media if the application
            has configured the AudioSocket to send media.
            The application should be sending about 50 packets of audio media per
            second; each buffer containing 20 milliseconds worth of audio content.
            The application must create a concrete class which derives from the
            AudioMediaBuffer abstract class. The buffer object passed to the Send
            method is still potentially in-use after the method returns to the
            caller. The application must not free the buffer's data until the
            the buffer object's Dispose() method is invoked by the Media Platform.
            </summary>
            <param name="buffer">AudioMediaBuffer to send.</param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IAudioMediaSession">
            <summary>
            IAudioMediaSession interface
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IAudioMediaSession.RenderContext">
            <summary>
            RenderContext
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IAudioMediaSession.SourceContext">
            <summary>
            SourceContext
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAudioMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack,Microsoft.Skype.Bots.Media.AudioFormat,Microsoft.Skype.Bots.Media.AudioSourceProvider.SendStatusChangedCallback,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="enabledStreamDirections"></param>
            <param name="mediaBufferReadyCallback"></param>
            <param name="supportedAudioFormat"></param>
            <param name="sendStatusChangedCallback"></param>
            <param name="callId"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAudioMediaSession.DeliverBuffer(Microsoft.Skype.Bots.Media.AudioMediaBuffer)">
            <summary>
            Deliver a buffer
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAudioMediaSession.AttachMediaPlayer(Microsoft.Skype.Bots.Media.IMediaPlayer)">
            <summary>
            Attach the mediaPlayer to the provider
            </summary>
            <param name="audioMediaPlayer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IAudioMediaSession.DetachMediaPlayer">
            <summary>
            Detach the media player 
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.ICertificateManager">
            <summary>
            Certificate management interface
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.ICertificateManager.GetCertificateByThumbprint(System.String)">
            <summary>
            Get a certificate from the StoreName.My, StoreLocation.LocalMachine store, via thumbprint
            </summary>
            <param name="thumbprint"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IFilePlayerMetricsCollector">
            <summary>
            Metrics collector for the file player
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IFilePlayerMetricsCollector.FileSizeInBytes">
            <summary>
            The file size
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IFilePlayerMetricsCollector.OnPlayStarted(System.DateTime)">
            <summary>
            OnPlayStarted
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IFilePlayerMetricsCollector.OnPlayStoppedOrPaused(System.DateTime)">
            <summary>
            OnPlayStoppedOrPaused
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IFilePlayerMetricsCollector.OnGetNextSampleCalled(System.DateTime)">
            <summary>
            OnGetNextSampleCalled
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IFilePlayerMetricsCollector.OnBufferDelivered">
            <summary>
            OnBufferDelivered
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IFilePlayerMetricsCollector.ReportMetrics">
            <summary>
            ReportMetrics
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IPlatformEnvironment">
            <summary>
            Interface that provides information related to the environment the platform is running on
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IPlatformEnvironment.NumberOfCores">
            <summary>
            Number of CPU cores
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IPlatformEnvironment.GetProductVersion">
            <summary>
            Get the Skype Media Bots product version
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMediaApiPlatform">
            <summary>
            Interface wrapping the MediaApi.MediaPlatform static methods/properties
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IMediaApiPlatform.MPInstanceURI">
            <summary>
            Gets the MediaApi.MPInstanceURI
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IMediaApiPlatform.MaxDecodingStreams">
            <summary>
            Gets the MediaApiPlatform.MaxVideoCapability.DecodeCapability.MaxNumDecodingStreams
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IMediaApiPlatform.IsInitialized">
            <summary>
            Gets the MediaApi.IsInitialized
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiPlatform.RegisterTraceDelegate(Microsoft.Rtc.Internal.Media.MediaApi.CorrelatedTraceDelegate)">
            <summary>
            Calls into MediaApi.RegisterTraceDelegate
            </summary>
            <param name="traceDelegate"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiPlatform.Initialize">
            <summary>
            Calls into MediaApi.Initialize
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiPlatform.GetMediaApiProductVersion">
            <summary>
            Get the MediaApi assembly version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiPlatform.Destroy">
            <summary>
            Calls into MediaApi.Destroy
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiPlatform.CreateRenderSession(System.Collections.Generic.IDictionary{Microsoft.Rtc.Internal.Media.MediaApi.MediaModality,Microsoft.Rtc.Internal.Media.MediaApi.RenderSessionProperty},System.String)">
            <summary>
            Calls into MediaApi.CreateRenderSession
            </summary>
            <param name="properties"></param>
            <param name="callId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMediaApiRenderSession">
            <summary>
            Interface wrapping the MediaApi.RenderSession
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IMediaApiRenderSession.MediaApiRenderSession">
            <summary>
            The MediaApi.RenderSession
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IMediaApiRenderSession.RenderSessionIdentifierBlob">
            <summary>
            The RenderSession.RenderSessionIdentifierBlob
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiRenderSession.RegisterBufferCallback(Microsoft.Rtc.Internal.Media.MediaApi.MediaModality,System.UInt16,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack)">
            <summary>
            Wrapper around RenderSession.RegisterBufferCallback
            </summary>
            <param name="modality"></param>
            <param name="channelIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMediaApiSourceConsumer">
            <summary>
            Interface wrapping the MediaApi.SourceConsumer
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IMediaApiSourceConsumer.Identifier">
            <summary>
            Calls into MediaApi.SourceConsumer.Identifier
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiSourceConsumer.AttachSourceProvider(Microsoft.Rtc.Internal.Media.MediaApi.IMediaSourceProvider)">
            <summary>
            Calls into MediaApi.AttachSourceProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiSourceConsumer.BeginDetachSourceProvider(System.AsyncCallback,System.Object)">
            <summary>
            Calls into MediaApi.SourceConsumer.BeginDetachSourceProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiSourceConsumer.EndDetachSourceProvider(System.IAsyncResult)">
            <summary>
            Calls into MediaApi.SourceConsumer.EndDetachSourceProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiSourceConsumer.DeliverBuffer(Microsoft.Rtc.Internal.Media.MediaApi.MediaBuffer,Microsoft.Skype.Bots.Media.BufferDisposeDelegate)">
            <summary>
            Delivers Media Api buffer
            </summary>
            <param name="buffer"></param>
            <param name="bufferDisposeDelegate"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMediaApiAudioSourceConsumer">
            <summary>
            Interface wrapping the MediaApi.AudioSourceConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiAudioSourceConsumer.DeliverBuffer(Microsoft.Skype.Bots.Media.AudioMediaBuffer,System.UInt16)">
            <summary>
            Creates a MediaApi buffer from the AudioMediaBuffer and calls into DeliverBuffer
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMediaApiVideoSourceConsumer">
            <summary>
            Interface wrapping the MediaApi.VideoSourceConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiVideoSourceConsumer.DeliverBuffer(Microsoft.Skype.Bots.Media.VideoMediaBuffer)">
            <summary>
            Creates a MediaApi buffer from the VideoMediaBuffer and calls into DeliverBuffer
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMediaApiDataSourceConsumer">
            <summary>
            Interface wrapping the MediaApi.DataSourceConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiDataSourceConsumer.GetMaxSendBufferSize(System.UInt32)">
            <summary>
            Maximum send buffer size
            </summary>
            <param name="numRecipients">Number of recipients the data needs to be sent. If data needs to broadcasted, this parameter should be set to 0.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiDataSourceConsumer.DeliverBuffer(Microsoft.Skype.Bots.Media.DataMediaBuffer,System.UInt32[])">
            <summary>
            Creates a MediaApi buffer from the DataMediaBuffer and calls into DeliverBuffer
            </summary>
            <param name="buffer"></param>
            <param name="recipientIds"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMediaApiDataSinkConsumer">
            <summary>
            Interface wrapping the MediaApi.DataSourceConsumer
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IMediaApiDataSinkConsumer.Identifier">
            <summary>
            Calls into MediaApi.SinkConsumer.Identifier
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiDataSinkConsumer.AttachSinkProvider(Microsoft.Rtc.Internal.Media.MediaApi.IDataSinkProvider)">
            <summary>
            Calls into MediaApi.AttachSinkProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiDataSinkConsumer.BeginDetachSinkProvider(System.AsyncCallback,System.Object)">
            <summary>
            Calls into MediaApi.SinkConsumer.BeginDetachSinkProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaApiDataSinkConsumer.EndDetachSinkProvider(System.IAsyncResult)">
            <summary>
            Calls into MediaApi.SinkConsumer.EndDetachSinkProvider
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMediaPlatform">
            <summary>
            Interface to the MediaPlatform.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaPlatform.Initialize(Microsoft.Skype.Bots.Media.MediaPlatformSettings)">
            <summary>
            Initializes the Media Platform for Bot.
            </summary>
            <param name="settings">Settings to initialize the Bot Media Platform.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket)">
            <summary>
            Returns a serialized MediaConfiguration object representing the socket so that the Skype calling cloud can establish an audio/video call to the bot.
            </summary>
            <param name="audioSocket">Socket that handles audio.</param>
            <returns>Serialized MediaConfiguration object.</returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            Returns a serialized MediaConfiguration object representing the sockets so that the Skype calling cloud can establish an audio/video call to the bot.
            </summary>
            <param name="audioSocket">Socket that handles audio.</param>
            <param name="videoSocket">Socket that handles video.</param>
            <returns>Serialized MediaConfiguration object.</returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket})">
            <summary>
            Returns a serialized MediaConfiguration object representing the sockets so that the Skype calling cloud can establish an audio/video call to the bot.
            </summary>
            <param name="audioSocket">Socket that handles audio.</param>
            <param name="videoSockets">Ordered list of video sockets. If multiview sockets are provided, only the first one can have a send direction (ie. send only or send receive) and all the sockets should have
            a receive direction.</param>
            <returns>Serialized MediaConfiguration object.</returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket},Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            Returns a serialized MediaConfiguration object representing the sockets so that the Skype calling cloud can establish an audio/video/video-based screen sharing call to the bot.
            </summary>
            <param name="audioSocket">Socket that handles audio.</param>
            <param name="videoSockets">Ordered list of video sockets. If multiview sockets are provided, only the first one can have a send direction (ie. send only or send receive) and all the sockets should have
            a receive direction.</param>
            <param name="vbssSocket">Video socket for the video-based screen sharing (VBSS) modality. Socket must be configured as RecvOnly.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IVideoSocket)">
            <summary>
            Returns a serialized mediaConfiguration object representing the socket so that the Skype calling cloud can establish a video-based screen sharing call to the bot.
            </summary>
            <param name="vbssSocket">Video socket for the video-based screen sharing (VBSS) modality. Socket must be configured as RecvOnly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,Microsoft.Skype.Bots.Media.IDataSocket)">
            <summary>
            Reserved for the internal use.
            </summary>
            Returns a serialized MediaConfiguration object representing the sockets so that the Skype calling cloud can establish an audio/data call to the bot.
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMediaPlatform.CreateMediaConfiguration(Microsoft.Skype.Bots.Media.IAudioSocket,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.IVideoSocket},Microsoft.Skype.Bots.Media.IVideoSocket,Microsoft.Skype.Bots.Media.IDataSocket)">
            <summary>
            Reserved for the internal use.
            </summary>
            Returns a serialized MediaConfiguration object representing the sockets so that the Skype calling cloud can establish an audio/video/video-based screen sharing call to the bot.
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IMPAzureAppHostWrapper">
            <summary>
            Wrapper around MPAzureAppHost, to enable our unit tests to not have to initialize a real MP
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMPAzureAppHostWrapper.Initialize(System.String,System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.Rtc.MPService.Internal.MPServiceEventDelegate,Microsoft.Rtc.MPService.Internal.MPAzureAppHost.GetTrustedServersDelegate,System.String,Microsoft.Rtc.MPService.IMPServiceCounterProvider)">
            <summary>
            Calls into MPAzureAppHost.Initialize
            </summary>
            <param name="publicRoleInstanceFQDN"></param>
            <param name="publicRoleInstancePort"></param>
            <param name="localPort"></param>
            <param name="certificate"></param>
            <param name="eventDelegate"></param>
            <param name="getTrustedServersDelegate"></param>
            <param name="alternateConfigFilePath"></param>
            <param name="perfProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMPAzureAppHostWrapper.Shutdown">
            <summary>
            Calls into MPAzureAppHost.Shutdown
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMPAzureAppHostWrapper.ApplyRtpPublicIPAddress(Microsoft.Rtc.MPService.Internal.PublicIPAddressConfiguration)">
            <summary>
            Calls into MPAzureAppHost.ApplyRtpPublicIPAddress
            </summary>
            <param name="rtpPublicIPAddress"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IMPAzureAppHostWrapper.GetMPProductVersion">
            <summary>
            Get the MP version
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.ISocketMetricsCollector">
            <summary>
            Interface that wraps sending metrics for a socket
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.ISocketMetricsCollector.MediaType">
            <summary>
            Media type
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.ISocketMetricsCollector.ReportMetrics(System.Boolean)">
            <summary>
            Report the metrics collected
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.ISocketMetricsCollector.OnBufferReceived(System.DateTime)">
            <summary>
            Called on buffer received
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.ISocketMetricsCollector.OnBufferSent(System.DateTime)">
            <summary>
            Called on buffer sent
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IVideoSocketMetricsCollector">
            <summary>
            Interface for video/vbss socket metrics collector
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IVideoSocketMetricsCollector.OnBufferReceived(System.DateTime,Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Called on buffer received
            </summary>
            <param name="utcTimestamp"></param>
            <param name="format"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IVideoSocketMetricsCollector.OnBufferSent(System.DateTime,Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Called on buffer sent
            </summary>
            <param name="utcTimestamp"></param>
            <param name="format"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IVideoMediaSession">
            <summary>
            IVideoMediaSession interface
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IVideoMediaSession.RenderContext">
            <summary>
            RenderContext
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IVideoMediaSession.SourceContext">
            <summary>
            SourceContext
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IVideoMediaSession.Initialize(Microsoft.Skype.Bots.Media.StreamDirection,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack,System.Collections.Generic.IList{Microsoft.Skype.Bots.Media.VideoFormat},System.UInt32,Microsoft.Skype.Bots.Media.VideoSourceProvider.SendStatusChangedCallback,Microsoft.Skype.Bots.Media.VideoSourceProvider.KeyFrameNeededCallback,System.String,System.Boolean)">
            <summary>
            Initialize
            </summary>
            <param name="enabledStreamDirections"></param>
            <param name="mediaBufferReadyCallback"></param>
            <param name="supportedVideoFormatList"></param>
            <param name="maxConcurrentStreams"></param>
            <param name="sendStatusChangedCallback"></param>
            <param name="keyFrameNeededCallback"></param>
            <param name="callId"></param>
            <param name="bypassDecoding"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IVideoMediaSession.DeliverBuffer(Microsoft.Skype.Bots.Media.VideoMediaBuffer)">
            <summary>
            Deliver a buffer
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IVideoMediaSession.AttachMediaPlayer(Microsoft.Skype.Bots.Media.IMediaPlayer)">
            <summary>
            Attach the mediaPlayer to the provider
            </summary>
            <param name="audioMediaPlayer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IVideoMediaSession.DetachMediaPlayer">
            <summary>
            Detach the media player 
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoMediaReceivedEventArgs">
            <summary>
            Event arguments of a VideoMediaReceived event.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaReceivedEventArgs.Buffer">
            <summary>
            The received video media buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaReceivedEventArgs.SocketId">
            <summary>
            The 0-based ID of the socket that is raising this event. This socket ID can be used in multiview 
            (ie. more than 1 video socket) to determine which video socket is raising this event. The socket ID 
            property will be present in both single view and multiview cases. The ID maps to the order in which 
            the video sockets are provided to the Microsoft.Skype.Bots.Media.MediaPlatform (or IMediaPlatform) API 
            CreateMediaConfiguration. Eg. If the collection of IVideoSocket objects in the CreateMediaConfiguration
            API contains { socketA, socketB, socketC }, the sockets will have the ID mapping of: 0 for socketA, 
            1 for socketB and 2 for socketC.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoMediaReceivedEventArgs.MediaType">
            <summary>
            MediaType of the video buffer. This could be Video or Vbss.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoKeyFrameNeededEventArgs">
            <summary>
            Event arguments of a VideoKeyFrameNeeded event.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoKeyFrameNeededEventArgs.SocketId">
            <summary>
            The 0-based ID of the socket that is raising this event. This socket ID can be used in multiview 
            (ie. more than 1 video socket) to determine which video socket is raising this event. The socket ID 
            property will be present in both single view and multiview cases. The ID maps to the order in which 
            the video sockets are provided to the Microsoft.Skype.Bots.Media.MediaPlatform (or IMediaPlatform) API 
            CreateMediaConfiguration. Eg. If the collection of IVideoSocket objects in the CreateMediaConfiguration
            API contains { socketA, socketB, socketC }, the sockets will have the ID mapping of: 0 for socketA, 
            1 for socketB and 2 for socketC.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoKeyFrameNeededEventArgs.MediaType">
            <summary>
            MediaType of the video buffer. This could be Video or Vbss.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoKeyFrameNeededEventArgs.VideoFormats">
            <summary>
            VideoFormats for which keyframe is needed
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoSendStatusChangedEventArgs">
            <summary>
            Event arguments of a VideoSendStatusChanged event.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSendStatusChangedEventArgs.MediaSendStatus">
            <summary>
            The media send status.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSendStatusChangedEventArgs.PreferredVideoSourceFormat">
            <summary>
            The preferred video source format if raw video was sent.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSendStatusChangedEventArgs.PreferredEncodedVideoSourceFormats">
            <summary>
            The encoded video source formats needed.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSendStatusChangedEventArgs.SocketId">
            <summary>
            The 0-based ID of the socket that is raising this event. This socket ID can be used in multiview 
            (ie. more than 1 video socket) to determine which video socket is raising this event. The socket ID 
            property will be present in both single view and multiview cases. The ID maps to the order in which 
            the video sockets are provided to the Microsoft.Skype.Bots.Media.MediaPlatform (or IMediaPlatform) API 
            CreateMediaConfiguration. Eg. If the collection of IVideoSocket objects in the CreateMediaConfiguration API 
            contains { socketA, socketB, socketC }, the sockets will have the ID mapping of: 0 for socketA, 1
            for socketB and 2 for socketC.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoSocketSettings">
            <summary>
            The video socket settings.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocketSettings.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketSettings.StreamDirections">
            <summary>
            The direction of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketSettings.SupportedSendVideoFormats">
            <summary>
            The supported video formats the Bot supports sending.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketSettings.MaxConcurrentSendStreams">
            <summary>
            Maximum number of concurrent streams that can be sent
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketSettings.ReceiveColorFormat">
            <summary>
            What color format should received video be delivered in.
            Currently only NV12 is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketSettings.CallId">
            <summary>
            An alphanumeric string that uniquely identifies a call.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketSettings.MediaType">
            <summary>
            Specifies the media type of the VideoSocket. 
            Valid types are: MediaType.Video and MediaType.Vbss
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocketSettings.Validate">
            <summary>
            Check the validity of the socketSettings
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IVideoSocket">
            <summary>
            Interface to a VideoSocket.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IVideoSocket.VideoMediaReceived">
            <summary>
            If the application has configured the VideoSocket to receive media, this
            event is raised each time a packet of video media is received.
            Once the application has consumed the buffer, it must call the buffer's
            Dispose() method.
            The application should be prepared to handle approximately 30 incoming
            video buffers per second.
            Events are serialized, so only one event at a time is raised to the app.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IVideoSocket.VideoSendStatusChanged">
            <summary>
            If the application has configured the VideoSocket to send media, this
            event is raised to inform the application when it may begin sending
            media and when it should stop. The application cannot send media before
            receiving a VideoMediaSendStatusChanged event indicating the SendStatus is 
            Active, such media will be discarded.
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.IVideoSocket.VideoKeyFrameNeeded">
            <summary>
            If the application has configured the VideoSocket to receive encoded media, this
            event is raised each time a key frame is needed.
            Events are serialized, so only one event at a time is raised to the app.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IVideoSocket.SocketId">
            <summary>
            The 0-based ID of the socket. This socket ID is useful to identify a socket in a 
            multiview (ie. more than 1 video socket) call. The same ID is used in the event 
            args of the VideoMediaReceived and VideoSendStatusChanged events that this class
             may raise. The socket ID property will be present in both single view and multiview 
            cases. The ID maps to the order in which the video sockets are provided to the 
            CreateMediaConfiguration API. 
            Eg., if the collection of IVideoSocket objects in the CreateMediaConfiguration API contains 
            {socketA, socketB, socketC}, the sockets will have the ID mapping of: 0 for socketA, 
            1 for socketB and 2 for socketC.
            Before the call to CreateMediaConfiguration, the SocketId has a value of -1.
            </summary> 
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IVideoSocket.Send(Microsoft.Skype.Bots.Media.VideoMediaBuffer)">
            <summary>
            Allows the application to send a packet of video media if the application
            has configured the VideoSocket to send media.
            The application should be sending about 30 video frame buffers/second.
            The application must create a concrete class which derives from the
            VideoMediaBuffer abstract class. The buffer object passed to the Send
            method is still potentially in-use after the method returns to the
            caller. The application must not free the buffer's data until the
            the buffer object's Dispose() method is invoked by the Media Platform.
            </summary>
            <param name="buffer">VideoMediaBuffer to send.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IVideoSocket.RequestKeyFrame">
            <summary>
            Allows the application to request for key frame.
            Only valid for sockets with the ReceiveColorFormat as H264
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IWavReaderMetricsCollector">
            <summary>
            Collector for the wav file reader
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IWavReaderMetricsCollector.ReportWavValidationFailure(System.Exception)">
            <summary>
            Report a wav validation failure
            </summary>
            <param name="validationException"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioSocketMetricsCollector">
            <summary>
            Metrics collection class for audio sockets
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocketMetricsCollector.#ctor(System.String,Microsoft.Skype.Bots.Media.AudioFormat)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
            <param name="audioFormat"></param>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocketMetricsCollector.MediaType">
            <summary>
            MediaType
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.AudioSocketMetricsCollector.AudioFormat">
            <summary>
            AudioFormat
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSocketMetricsCollector.GatherSocketMetrics">
            <summary>
            Gather the socket metrics
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector">
            <summary>
            Class that collects file player metrics
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector.FileSizeInBytes">
            <summary>
            File size
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector.IsTest">
            <summary>
            IsTest
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector.OnPlayStarted(System.DateTime)">
            <summary>
            OnPlayStarted
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector.OnPlayStoppedOrPaused(System.DateTime)">
            <summary>
            OnPlayStopped
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector.OnGetNextSampleCalled(System.DateTime)">
            <summary>
            OnGetNextSampleCalled. Serialized.
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector.OnBufferDelivered">
            <summary>
            OnBufferDelivered
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.FilePlayerMetricsCollector.ReportMetrics">
            <summary>
            ReportMetrics
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.InternalLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Skype.Bots.Media.InternalLogger"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.Write(System.String,System.String,Microsoft.Skype.Internal.Bots.Media.LogLevel,System.String,System.Object[])">
            <summary>
            Log a message with correlation id.
            </summary>
            <param name="component">The component.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="level">The log level.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.Write(System.String,Microsoft.Skype.Internal.Bots.Media.LogLevel,System.String,System.Object[])">
            <summary>
            Log a verbose level message with correlation id.
            </summary>
            <param name="component"></param>
            <param name="level">The log level.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.AddListener(System.Diagnostics.TraceListener)">
            <summary>
            Add a tracelistener to the log source to control where the logs get sent
            </summary>
            <param name="traceListener">The trace listener</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.AddListeners(System.Collections.Generic.IList{System.Diagnostics.TraceListener})">
            <summary>
            Add tracelisteners to the log source to control where the logs get sent
            </summary>
            <param name="traceListeners">The trace listeners</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.RemoveListener(System.Diagnostics.TraceListener)">
            <summary>
            Remove and dispose tracelisteners from the log source
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.Flush">
            <summary>
            Flushes out logs to the stream
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.SetLoggingLevel(System.String,Microsoft.Skype.Internal.Bots.Media.LogLevel)">
            <summary>
            Set the logging level for a component. If a component doesn't have a level set, all traces for it will be logged.
            </summary>
            <param name="component">Valid components would be MediaPlatform.Name and MediaApiLogger.MediaApiComponentName</param>
            <param name="level"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.InternalLogger.CheckTracingLevel(System.String,Microsoft.Skype.Internal.Bots.Media.LogLevel)">
            <summary>
            Return true if the trace should be logged, false if it should be dropped based on the tracing level
            </summary>
            <param name="component">Valid components would be MediaPlatform.Name and MediaApiLogger.MediaApiComponentName</param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.Logger">
            <summary>
            Logger for the platform
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.Logger.ApplyLoggingConfiguration(Microsoft.Skype.Internal.Bots.Media.LoggingConfiguration)">
            <summary>
            Apply the logging config
            </summary>
            <param name="loggingConfiguration"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaApiLogger">
            <summary>
            Logger for MediaApi traces
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiLogger.Initialize">
            <summary>
            Initialize the logger
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiLogger.Uninitialize">
            <summary>
            Uninitialize the logger
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiLogger.TraceDelegate(System.Int32,System.String,System.String)">
            <summary>
            MediaApi tracing delegate
            </summary>
            <param name="logLevel"></param>
            <param name="strCallId"></param>
            <param name="strLog"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.TelemetryWriter">
            <summary>
            Implementation of ITelemetryWriter. Writes telemetry events to Aria.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.TelemetryWriter.Initialize(System.String,Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration,System.Boolean,System.String,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="applicationId"></param>
            <param name="configuration"></param>
            <param name="isTest"></param>
            <param name="mediaStackVersion"></param>
            <param name="mediaBotsVersion"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.TelemetryWriter.Initialize(System.String,Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration,System.Boolean,System.String,System.String,Microsoft.Skype.Bots.Media.IAriaClient)">
            <summary>
            Initialize
            </summary>
            <param name="applicationId"></param>
            <param name="configuration"></param>
            <param name="isTest"></param>
            <param name="mediaBotsVersion"></param>
            <param name="mediaStackVersion"></param>
            <param name="ariaClient">Wrapper around the class that sends events to Aria. Used for unit tests.</param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.TelemetryWriter.SetTelemetryConfiguration(Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration)">
            <summary>
            Set the telemetry config
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.TelemetryWriter.SetTelemetryConfiguration(Microsoft.Skype.Internal.Bots.Media.TelemetryConfiguration,Microsoft.Skype.Bots.Media.IAriaClient)">
            <summary>
            Set the telemetry config
            </summary>
            <param name="configuration"></param>
            <param name="ariaClient"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.TelemetryWriter.TryLogSocketMetrics(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Logs socket metrics if it's enabled in the config
            </summary>
            <param name="metricsData"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.TelemetryWriter.TryLogWavValidationFailure(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Logs a wav validation failure if socket metrics monitoring is enabled
            </summary>
            <param name="metricsData"></param>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.TelemetryWriter.TryLogFilePlayerMetrics(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            TryLogFilePlayerMetrics
            </summary>
            <param name="metricsData"></param>
            <param name="isTest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.TelemetryWriter.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.SocketMetricsCollector">
            <summary>
            Base metrics collection class for sockets.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.SendStallsPerMinute">
            <summary>
            Send stalls per minute. Returns 0 if there was no buffers sent.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.ReceiveStallsPerMinute">
            <summary>
            Receive stalls per minute. Returns 0 if there was no buffers received.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.TotalTimeBuffersSent">
            <summary>
            Difference of time between first buffer sent and last buffer sent
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.TotalBuffersSent">
            <summary>
            Total number of buffers sent
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.TotalAverageBuffersSentPerSecond">
            <summary>
            Average of buffers sent per second, in total
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.TotalTimeBuffersReceived">
            <summary>
            Difference of time between first buffer received and last buffer received
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.TotalAverageBuffersReceivedPerSecond">
            <summary>
            Average buffers received per second, in total
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.TotalBuffersReceived">
            <summary>
            Total number of buffers sent
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.MediaType">
            <summary>
            MediaType
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.CallId">
            <summary>
            CallId
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.TotalSendStalls">
            <summary>
            Number of send stalls
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SocketMetricsCollector.TotalReceiveStalls">
            <summary>
            Number of receive stalls
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SocketMetricsCollector.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SocketMetricsCollector.OnBufferReceived(System.DateTime)">
            <summary>
            Called by the children metrics collector classes on buffer received. Will check for media stalls.
            </summary>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SocketMetricsCollector.OnBufferSent(System.DateTime)">
            <summary>
            Called by the children metrics collector classes on buffer sent. Will check for media stalls.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SocketMetricsCollector.ReportMetrics(System.Boolean)">
            <summary>
            Report to telemetry writer 
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoSocketMetricsCollector">
            <summary>
            Metrics collector class for video/vbss sockets
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketMetricsCollector.BuffersReceivedDictionary">
            <summary>
            Exposed for unit testing purposes
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketMetricsCollector.BuffersSentDictionary">
            <summary>
            Exposed for unit testing purposes
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocketMetricsCollector.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.VideoSocketMetricsCollector.MediaType">
            <summary>
            MediaType
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocketMetricsCollector.OnBufferReceived(System.DateTime,Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Called upon receiving buffers.
            </summary>
            <param name="utcTimestamp"></param>
            <param name="format"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocketMetricsCollector.OnBufferSent(System.DateTime,Microsoft.Skype.Bots.Media.VideoFormat)">
            <summary>
            Called upon sending buffers.
            </summary>
            <param name="utcTimestamp"></param>
            <param name="format"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSocketMetricsCollector.GatherSocketMetrics">
            <summary>
            Gather the socket metrics
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.BufferTracker">
            <summary>
            Internal class used by VideoSocketMetricsCollector to track buffers received
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.BufferTracker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.BufferTracker.StopwatchWrapper">
            <summary>
            Exposed for unit tests
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.BufferTracker.StartTrackingBuffers">
            <summary>
            Start tracking buffers.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.BufferTracker.StopTrackingBuffers">
            <summary>
            Stop tracking buffers.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.BufferTracker.Elapsed">
            <summary>
            Time elapsed tracking buffers.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.BufferTracker.BuffersCount">
            <summary>
            Number of buffers. Increment with the IncrementBuffersCount method.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.BufferTracker.VideoFormat">
            <summary>
            The video format this buffer tracker is tracking
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.BufferTracker.IncrementBuffersCount">
            <summary>
            Thread-safe increment of the buffers count.
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.BufferTracker.AverageBuffersPerSecond">
            <summary>
            Average buffers received per second
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.WavReaderMetricsCollector">
            <summary>
            Class that collects metrics for the wav reader
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.WavReaderMetricsCollector.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="isTest"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.WavReaderMetricsCollector.ReportWavValidationFailure(System.Exception)">
            <summary>
            Report a validation failure
            </summary>
            <param name="validationException"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AriaClient">
            <summary>
            Wrapper class around the aria writer classes
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AriaClient.Initialize(System.String)">
            <summary>
            Init
            </summary>
            <param name="tenantToken"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AriaClient.MonitorUnhandledExceptions">
            <summary>
            Start monitoring unhandled exceptions
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AriaClient.SetContext(System.String,System.String)">
            <summary>
            Set the context on the telemetry logger
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AriaClient.LogEvent(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Log an event to aria.
            </summary>
            <param name="eventName"></param>
            <param name="eventProperties"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AriaClient.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.CertificateManager">
            <summary>
            CertificateManager
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.CertificateManager.GetCertificateByThumbprint(System.String)">
            <summary>
            Get a cert by thumbprint
            </summary>
            <param name="thumbprint"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper">
            <summary>
            Class that wraps the calls to IMPMediaSession
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper.m_mpMediaSession">
            <summary>
            The underlying mp mediaSession that handles all these calls
            </summary>
        </member>
        <member name="F:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper.m_refCount">
            <summary>
            Number of objects holding a reference to this mediaSession
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper.Id">
            <summary>
            Id of the mediaSession
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper.ToneReceived">
            <summary>
            Eventhandler for ToneReceived
            </summary>
        </member>
        <member name="E:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper.DominantSpeakerChanged">
            <summary>
            Eventhandler for DominantSpeakerChanged
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper.AddRef">
            <summary>
            Increments the ref
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper.DecrementRef">
            <summary>
            Decrements the ref
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.Wrappers.MPMediaSessionWrapper.RequestKeyFrame(Microsoft.Rtc.MPService.MPMediaFormat.MediaType,System.Int32)">
            <summary>
            Requests the keyframe for the specified mediaType and videoIndex
            </summary>
            <param name="mediaType"></param>
            <param name="videoIndex"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.PlatformEnvironment">
            <summary>
            Class that provides information related to the environment the platform is running on
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.PlatformEnvironment.NumberOfCores">
            <summary>
            Number of CPU cores
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.PlatformEnvironment.#ctor">
            <summary>
            PlatformEnvironment constructor
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.PlatformEnvironment.GetProductVersion">
            <summary>
            Get the Skype Media Bots product version
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaApiPlatformWrapper.MPInstanceURI">
            <summary>
            Gets the MediaApi.MPInstanceURI
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaApiPlatformWrapper.IsInitialized">
            <summary>
            Gets the MediaApi.IsInitialized
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiPlatformWrapper.RegisterTraceDelegate(Microsoft.Rtc.Internal.Media.MediaApi.CorrelatedTraceDelegate)">
            <summary>
            Calls into MediaApi.RegisterTraceDelegate
            </summary>
            <param name="traceDelegate"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiPlatformWrapper.Initialize">
            <summary>
            Calls into MediaApi.Initialize
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiPlatformWrapper.GetMediaApiProductVersion">
            <summary>
            Get the MediaApi (ie. mediastack) assembly version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiPlatformWrapper.Destroy">
            <summary>
            Calls into MediaApi.Destroy
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiPlatformWrapper.CreateRenderSession(System.Collections.Generic.IDictionary{Microsoft.Rtc.Internal.Media.MediaApi.MediaModality,Microsoft.Rtc.Internal.Media.MediaApi.RenderSessionProperty},System.String)">
            <summary>
            Calls into MediaApi.CreateRenderSession
            </summary>
            <param name="properties"></param>
            <param name="callId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MediaApiRenderSessionWrapper">
            <summary>
            Wrapper class around MediaApi.RenderSession
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaApiRenderSessionWrapper.MediaApiRenderSession">
            <summary>
            The MediaApi render session
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.MediaApiRenderSessionWrapper.RenderSessionIdentifierBlob">
            <summary>
            The MediaApiRenderSession.RenderSessionIdentifierBlob
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiRenderSessionWrapper.RegisterBufferCallback(Microsoft.Rtc.Internal.Media.MediaApi.MediaModality,System.UInt16,Microsoft.Rtc.Internal.Media.MediaApi.MediaBufferReadyCallBack)">
            <summary>
            Wrapper around MediaApi.RegisterBufferCallback
            </summary>
            <param name="modality"></param>
            <param name="channelIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiRenderSessionWrapper.Dispose">
            <summary>
            Disposes the MediaApiRenderSession
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiRenderSessionWrapper.ParseRenderSessionIdentifierBlob(System.String)">
            <summary>
            Calls into MediaApi.RenderSession.ParseRenderSessionIdentifierBlob
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MediaApiRenderSessionWrapper.CreateRenderSessionProperties(Microsoft.Rtc.Internal.Media.MediaApi.MediaModality,System.Boolean)">
            <summary>
            Creates a dictionary of MediaApi render session properties from a modality
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.SourceConsumerWrapper">
            <summary>
            Wrapper around MediaApi.MediaSourceConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceConsumerWrapper.AttachSourceProvider(Microsoft.Rtc.Internal.Media.MediaApi.IMediaSourceProvider)">
            <summary>
            Calls into MediaSourceConsumer.AttachSourceProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceConsumerWrapper.BeginDetachSourceProvider(System.AsyncCallback,System.Object)">
            <summary>
            Calls into MediaSourceProvider.BeginDetachSourceProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceConsumerWrapper.EndDetachSourceProvider(System.IAsyncResult)">
            <summary>
            Calls into MediaSourceProvider.BeginDetachSourceProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceConsumerWrapper.DeliverBuffer(Microsoft.Rtc.Internal.Media.MediaApi.MediaBuffer,Microsoft.Skype.Bots.Media.BufferDisposeDelegate)">
            <summary>
            Deliver media buffer to mediastack
            </summary>
            <param name="buffer"></param>
            <param name="bufferDisposeDelegate"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.SourceConsumerWrapper.Dispose">
            <summary>
            Disposes MediaSourceProvider
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.SourceConsumerWrapper.Identifier">
            <summary>
            Calls into MediaSourceProvider.Identifier
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.AudioSourceConsumerWrapper">
            <summary>
            Wrapper around MediaApi.AudioMediaSourceConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSourceConsumerWrapper.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSourceConsumerWrapper.#ctor(System.String,Microsoft.Rtc.Internal.Media.MediaApi.IMediaSourceConsumer)">
            <summary>
            Unit test constructor
            </summary>
            <param name="callId"></param>
            <param name="mediaSourceConsumer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSourceConsumerWrapper.CreateSourceConsumer(System.String)">
            <summary>
            Creates an AudioSourceConsumer
            </summary>
            <param name="callId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.AudioSourceConsumerWrapper.DeliverBuffer(Microsoft.Skype.Bots.Media.AudioMediaBuffer,System.UInt16)">
            <summary>
            Creates a MediaApi audio buffer and calls into MediaSourceConsumer.DeliverBuffer
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.VideoSourceConsumerWrapper">
            <summary>
            Wrapper around MediaApi.AudioMediaSourceConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSourceConsumerWrapper.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSourceConsumerWrapper.#ctor(System.String,Microsoft.Rtc.Internal.Media.MediaApi.IMediaSourceConsumer)">
            <summary>
            Unit test constructor
            </summary>
            <param name="callId"></param>
            <param name="mediaSourceConsumer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSourceConsumerWrapper.CreateSourceConsumer(System.String)">
            <summary>
            Creates an AudioSourceConsumer
            </summary>
            <param name="callId"></param>
            <returns></returns>
            
            <summary>
            Creates a VideoSourceConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSourceConsumerWrapper.DeliverBuffer(Microsoft.Skype.Bots.Media.VideoMediaBuffer)">
            <summary>
            Creates a MediaApi video buffer and calls into MediaSourceConsumer.DeliverBuffer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.VideoSourceConsumerWrapper.GetVideoFormat(Microsoft.Skype.Bots.Media.VideoColorFormat)">
            <summary>
            Helper to convert MediaPlatform VideoColorFormat to MediaApi VideoFormat
            </summary>
            <param name="format"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataSourceConsumerWrapper">
            <summary>
            Wrapper around MediaApi.DataMediaSourceConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceConsumerWrapper.GetMaxSendBufferSize(System.UInt32)">
            <summary>
            Max buffer size
            </summary>
            <param name="numRecipients"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceConsumerWrapper.#ctor(System.String,Microsoft.Skype.Bots.Media.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceConsumerWrapper.#ctor(System.String,Microsoft.Skype.Bots.Media.DataType,Microsoft.Rtc.Internal.Media.MediaApi.IMediaSourceConsumer)">
            <summary>
            Unit test constructor
            </summary>
            <param name="callId"></param>
            <param name="dataType"></param>
            <param name="mediaSourceConsumer"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceConsumerWrapper.CreateSourceConsumer(System.String)">
            <summary>
            
            </summary>
            <param name="callId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSourceConsumerWrapper.DeliverBuffer(Microsoft.Skype.Bots.Media.DataMediaBuffer,System.UInt32[])">
            <summary>
            Creates a MediaApi data buffer and calls into MediaSourceConsumer.DeliverBuffer
            </summary>
            <param name="mediaBuffer"></param>
            <param name="recipientIds"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.DataSinkConsumerWrapper">
            <summary>
            Wrapper around MediaApi.DataSinkConsumerWrapper
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkConsumerWrapper.#ctor(System.String,Microsoft.Rtc.Internal.Media.MediaApi.ExternalDataType)">
            <summary>
            Constructor
            </summary>
            <param name="callId"></param>
            <param name="externalDataType"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkConsumerWrapper.CreateSinkConsumer(System.String,Microsoft.Rtc.Internal.Media.MediaApi.ExternalDataType)">
            <summary>
            Creates a DataSinkConsumer
            </summary>
            <param name="callId"></param>
            <param name="externalDataType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkConsumerWrapper.AttachSinkProvider(Microsoft.Rtc.Internal.Media.MediaApi.IDataSinkProvider)">
            <summary>
            Calls into MediaSinkConsumer.AttachSinkProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkConsumerWrapper.BeginDetachSinkProvider(System.AsyncCallback,System.Object)">
            <summary>
            Calls into MediaSinkConsumer.BeginDetachSinkProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkConsumerWrapper.EndDetachSinkProvider(System.IAsyncResult)">
            <summary>
            Calls into MediaSinkConsumer.EndDetachSinkProvider
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkConsumerWrapper.Dispose">
            <summary>
            Disposes MediaSinkConsumer
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.DataSinkConsumerWrapper.Dispose(System.Boolean)">
            <summary>
            Disposes MediaSinkConsumer
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.MPAzureAppHostWrapper">
            <summary>
            Class implementing the IMPAzureAppHostWrapper
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MPAzureAppHostWrapper.Initialize(System.String,System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.Rtc.MPService.Internal.MPServiceEventDelegate,Microsoft.Rtc.MPService.Internal.MPAzureAppHost.GetTrustedServersDelegate,System.String,Microsoft.Rtc.MPService.IMPServiceCounterProvider)">
            <summary>
            Calls MPAzureAppHost.Initialize
            </summary>
            <param name="publicRoleInstanceFQDN"></param>
            <param name="publicRoleInstancePort"></param>
            <param name="localPort"></param>
            <param name="certificate"></param>
            <param name="eventDelegate"></param>
            <param name="getTrustedServersDelegate"></param>
            <param name="alternateConfigFilePath"></param>
            <param name="perfCounterProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MPAzureAppHostWrapper.Shutdown">
            <summary>
            Calls MPAzureAppHost.Shutdown();
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MPAzureAppHostWrapper.ApplyRtpPublicIPAddress(Microsoft.Rtc.MPService.Internal.PublicIPAddressConfiguration)">
            <summary>
            Calls MPAzureAppHost.ApplyRtpPublicIPAddress
            </summary>
            <param name="rtpPublicIPAddress"></param>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.MPAzureAppHostWrapper.GetMPProductVersion">
            <summary>
            Get MP version
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.RegistryManager">
            <summary>
            Class that wraps Registry invocations
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.RegistryManager.GetSubKeyNames(Microsoft.Skype.Bots.Media.RegistryKeyWrapper)">
            <summary>
            Wrapper around RegistryKey.GetSubKeyNames
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.RegistryManager.GetValue(Microsoft.Skype.Bots.Media.RegistryKeyWrapper,System.String)">
            <summary>
            Wrapper around RegistryKey.GetValue
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.RegistryManager.OpenLocalMachineSubKey(System.String)">
            <summary>
            Open sub key in LocalMachine
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.RegistryManager.GetProductVersion(System.String)">
            <summary>
            Get the product version from the mediaperf library in the registry
            </summary>
            <param name="registeredMediaPerfLibraryPath"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.RegistryKeyWrapper">
            <summary>
            Wrapper around RegistryKey class, which doesn't have a public constructor. So 
            using a wrapper for unit testing purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.IStopwatchWrapper">
            <summary>
            Wrapper around the stopwatch class, for unit testing purposes
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IStopwatchWrapper.Start">
            <summary>
            Start the stopwatch
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.IStopwatchWrapper.Stop">
            <summary>
            Stop the stopwatch
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.IStopwatchWrapper.Elapsed">
            <summary>
            Time elapsed
            </summary>
        </member>
        <member name="T:Microsoft.Skype.Bots.Media.StopwatchWrapper">
            <summary>
            Implementation of the stopwatch wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.StopwatchWrapper.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:Microsoft.Skype.Bots.Media.StopwatchWrapper.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="P:Microsoft.Skype.Bots.Media.StopwatchWrapper.Elapsed">
            <summary>
            Elapsed
            </summary>
        </member>
        <member name="T:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState">
            <summary>
            Internal class to wrap the state for Threadpool workitem.
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.method">
            <summary>
            Method to be invoked when workitem is executed
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.state">
            <summary>
            original state which need to be passed to the method
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.wrapperCallback">
            <summary>
            static wrappercallback method
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.wrapperCallbackNullState">
            <summary>
            static wrappercallback method, when state is null
            </summary>
        </member>
        <member name="P:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.WrapperCallback">
            <summary>
            Wrapper static callback method, which should be used as workitem for wrapped userworkitem to be 
            executed on Threadpool.
            </summary>
        </member>
        <member name="P:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.WrapperCallbackNullState">
            <summary>
            Wrapper static callback method, which should be used as workitem for wrapped userworkitem to be 
            executed on Threadpool.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            Construtor 
            </summary>
            <param name="userCallback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other asynchronous operations.</param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.WrappedQueueUserWorkItemNullState(System.Object)">
            <summary>
            Wrapped method which invokes the actual method and with no user state passed.
            </summary>
            <param name="state">
            QueueWorkItemState wrapped the original method and state is null
            </param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.WrappedQueueUserWorkItem(System.Object)">
            <summary>
            Wrapped method which invokes the actual method and with given user state.
            </summary>
            <param name="state">
            QueueWorkItemState wrapped the original method and state
            </param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.QueueWorkItemState.ExecuteWrappedMethod(System.Threading.WaitCallback,System.Object)">
            <summary>
            Execute the wrapped method and do appropriate for unhandled exception 
            </summary>
            <param name="method">The method to execute.</param>
            <param name="state">The state to be passed to the method.</param>
        </member>
        <member name="T:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1">
            <summary>
            Ensures that all items in the queue are processed in a
            serialized manner. Not all items are necessarily processed 
            by the same thread.
            </summary>
            <typeparam name="T">A Workitem class</typeparam>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.m_q">
            <summary>
            The internal storage queue.
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.m_processingState">
            <summary>
            A flag indicating the current processing state.
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.m_processAsync">
            <summary>
            A flag indicating whether the workitems processing should be offloaded
            to a worker thread.
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.m_processingThreadId">
            <summary>
            The ID of the worker thread which is currently (or, most recently was)
            processing the queue.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SerializationQueue class.
            </summary>
            <param name="processAsync">
            true if processing should always use a thread pool thread; 
            false if processing should be attempted on the current thread.
            </param>
        </member>
        <member name="P:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.Count">
            <summary>
            Return count of items in the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.ProcessAsync">
            <summary>
            Returns whether the queue was configured to process
            async or not.
            </summary>
            <value>
            Returns whether the queue was configured to process
            async or not.
            </value>
        </member>
        <member name="P:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.ProcessingThreadId">
            <summary>
            The ID of the worker thread which is currently (or, most recently was)
            processing the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.IsEmpty">
            <summary>
            Gets a value indicating whether the queue is empty or not.
            </summary>
            <value>true if the queue is empty; false otherwise.</value>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for later processing.
            </summary>
            <param name="item">The item to enqueue.</param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.EnqueueAndProcess(`0)">
            <summary>
            Enqueues an item and starts the queue processing.
            </summary>
            <param name="item">
            The item to enqueue and process.
            </param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.Process">
            <summary>
            Processes the items in the queue. Items added while processing
            takes place will also be picked up, Start processing using the 
            queue processing flag.
            </summary>        
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.Process(System.Boolean)">
             <summary>
             Processes the items in the queue. Items added while processing
             takes place will also be picked up. Start process using the same 
             thread or work thread depends on processAsync.
             </summary>
            <param name="processAsync">
             To override the queue processing flag to process the workitem.
             true if processing should always use a thread pool thread; 
             false if processing should be attempted on the current thread.
             </param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.SetProcessingStateIdle">
            <summary>
            Sets the processing state to idle.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.ProcessItems">
            <summary>
            Processes the items in the queue.
            </summary>
            <returns>
            true if the processing is completed; false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.TryDequeue(`0@)">
            <summary>
            Tries to dequeue an item from the queue for processing.
            </summary>
            <param name="item">
            The dequeued item.
            </param>
            <returns>
            true if the item was successfully dequeued; false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.ResumeProcessing">
            <summary>
            Resumes processing the items in the queue. Items added while processing
            takes place will also be processed.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.BeginProcessing(System.Boolean)">
            <summary>
            Attempts to start queue processing if the processing flag can be acquired.
            </summary>
            <param name="async">
            true if processing should be offloaded to a thread pool thread;
            false if processing should be attempted on the current thread.
            </param>        
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.EndProcessing">
            <summary>
            Ends the processing by resetting the processing state. If the queue still
            contains workitems an async processing restart is attempted.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.ResumeProcessingCallback(System.Object)">
            <summary>
            Thread pool callback wrapper for resuming procesing.
            </summary>
            <param name="state">
            State associated with this callback.
            </param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queues a unit of work onto the thread pool, but wraps
            it in a method that catches exceptions so the thread does't die.
            </summary>
            <param name="method">The method to run on the thread pool</param>
            <param name="state">Any state associated with that method.</param>        
            <exception cref="T:System.ApplicationException">Thrown if queuing failed.</exception>
        </member>
        <member name="T:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.ProcessingState">
            <summary>
            Used to define the constants for processing state.
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.ProcessingState.Idle">
            <summary>
            There's no thread currently processing the queue.
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.SerializationQueue`1.ProcessingState.Processing">
            <summary>
            A thread is currently processing the queue.
            </summary>
        </member>
        <member name="T:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.WorkitemQueue">
            <summary>
            Defines a serialization queue for synchronous workitems.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.WorkitemQueue.#ctor">
            <summary>
            Initializes a new instance of the WorkItemQueue class.
            Processing will be dispatched to a separate thread pool worker thread;
            the workitems in the queue will not be processed on the current thread.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.WorkitemQueue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the WorkItemQueue class.
            </summary>
            <param name="processAsync">
            true if item processing should happen on a worker thread; 
            false if processing should be attempted on the current thread.
            </param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.WorkitemQueue.ProcessItems">
            <summary>
            Processes all workitems in the queue.
            </summary>
            <returns>
            true when all items have been processed.
            </returns>
        </member>
        <member name="T:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.IWorkitem">
            <summary>
            Interface that needs to be implemented by all workitems to provide
            the item processing method. Items implementing this interface are
            completed when the processing method completes.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.IWorkitem.Process">
            <summary>
            Carries on the operation identified by the workitem in
            the context of the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.EventWorkitem`1">
            <summary>
            EventWorkitem
            </summary>
            <typeparam name="E">the type of EventArgs-derived event parameter</typeparam>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.EventWorkitem`1.m_eventHandler">
            <summary>
            The event handler to call.
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.EventWorkitem`1.m_sender">
            <summary>
            Sender of the event.
            </summary>
        </member>
        <member name="F:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.EventWorkitem`1.m_eventArgs">
            <summary>
            The event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.EventWorkitem`1.#ctor(System.EventHandler{`0},System.Object,`0)">
            <summary>
            Initializes the class using event handler, sender object, and event argument.
            </summary>
            <param name="eventHandler">The event handler to call.</param>
            <param name="sender">The sender to use in the event.</param>
            <param name="eventArgs">The event args to use.</param>
        </member>
        <member name="M:Microsoft.Rtc.Internal.MultiPointController.WorkItemQueue.EventWorkitem`1.Process">
            <summary>
            Raise the event using the event information.
            </summary>
        </member>
    </members>
</doc>
